Problem : Find all valid combinations of k numbers that sum up to n such that the following conditions are true:
          Only numbers 1 through 9 are used.
          Each number is used at most once.
          Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.
          
          Example 1:
          Input: k = 3, n = 7
          Output: [[1,2,4]]
          Explanation:
          1 + 2 + 4 = 7
          There are no other valid combinations.

Solution : 

void solve(int idx,int k,int n,vector<int>& ans,vector<vector<int>>& result){
        if(k==0 && n==0){
            result.push_back(ans);
            return;
        }
        if(k<0 || n<0)
            return;
        if(idx>9)
            return;
        //include
        ans.push_back(idx);
        solve(idx+1,k-1,n-idx,ans,result);
        ans.pop_back();
        //exclude
        solve(idx+1,k,n,ans,result);
    }
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<vector<int>> result;
        vector<int> ans;
        int index=1;
        solve(index,k,n,ans,result);
        return result;
   }
