Problem : Given an unsorted array Arr of size N of positive integers. One number 'A' from set {1, 2,....,N} is missing and one 
          number 'B' occurs twice in array. Find these two numbers.
          
          Example 1:
          
          Input:
          N = 2
          Arr[] = {2, 2}
          Output: 2 1
          Explanation: Repeating number is 2 and 
          smallest positive missing number is 1.

Solution : 

vector<int> findTwoElement(vector<int> arr, int N) {
        // mathematical solution
        long long n=N;
        long long S=0,S2=0;
        long long Sn=(n*(n+1))/2;
        long long S2n=(n*(n+1)*(2*n+1))/6;
        for(int i=0;i<n;i++){
            S=S+arr[i];
            S2=S2+((long long)arr[i]*(long long)arr[i]);
        }
        //val1=S-Sn which will give x-y=S-Sn (x=repeating,y=missing)
        long long val1=S-Sn;
        //val2=S^2-S^2n which will give x^2-y^2=S^2-S^2n 
        // so (x-y)(x+y)=S^2-S^2n ,i.e x+y=S^2-S^2n/val1 (x=repeating,y=missing)
        long long val2=S2-S2n;
        val2=val2/val1;
        
        long long repeating = (val1+val2)/2;
        long long missing = (val2-repeating);
        return {(int)repeating,(int)missing};
        
        // hash solution
        // Note : array indexing are considered faster then map key-value indexing
        // vector<int> mp(N+1,0);
        // for(int i=0;i<N;i++){
        //     mp[arr[i]]++;
        // }
        // int val1=-1,val2=-1;
        // for(int i=1;i<=N;i++){
        //     if(mp[i]==2)
        //         val1=i;
        //     if(mp[i]==0)
        //         val2=i;
        //     if(val1!=-1 && val2!=-1)
        //         break;
        // }
        // return {val1,val2};
    }
