Problem : You are given a 0-indexed string s and a dictionary of words dictionary. You have to break s into one or more 
          non-overlapping substrings such that each substring is present in dictionary. There may be some extra 
          characters in s which are not present in any of the substrings.
          Return the minimum number of extra characters left over if you break up s optimally.
          
          Example 1:
          Input: s = "leetscode", dictionary = ["leet","code","leetcode"]
          Output: 1
          Explanation: We can break s in two substrings: "leet" from index 0 to 3 and "code" from index 5 to 8. 
          There is only 1 unused character (at index 4), so we return 1.

Solution :

class Solution {
public:
    int solve(int idx,string s,set<string>& st,vector<int>& dp){
        if(idx>=s.length())
            return 0;
        if(dp[idx]!=-1)
            return dp[idx];
        int mini=s.length();
        string currStr="";
        for(int i=idx;i<s.length();i++){
            currStr+=s[i];
            int currExtra=0;
            if(st.find(currStr)==st.end()){
                currExtra=currStr.length();
            }
            int remainExtra=solve(i+1,s,st,dp);
            mini=min(mini,(currExtra+remainExtra));
        }
        return dp[idx]=mini;
    }
    int minExtraChar(string s, vector<string>& dictionary) {
        int index=0;
        set<string> st;
        for(auto it:dictionary){
            st.insert(it);
        }
        // vector<int> dp(s.length(),-1);
        // return solve(index,s,st,dp);

        vector<int> dp(s.length()+1,0);
        for(int idx=s.length()-1;idx>=0;idx--){
            int mini=s.length();
            string currStr="";
            for(int i=idx;i<s.length();i++){
                currStr+=s[i];
                int currExtra=0;
                if(st.find(currStr)==st.end()){
                    currExtra=currStr.length();
                }
                int remainExtra=dp[i+1];
                mini=min(mini,(currExtra+remainExtra));
            }
            dp[idx]=mini;
        }
        return dp[0];
    }
};
