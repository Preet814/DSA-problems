Problem : Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.
          A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing 
          the relative order of the remaining characters.
          For example, "ace" is a subsequence of "abcde".
          A common subsequence of two strings is a subsequence that is common to both strings.
          
          Example 1:
          Input: text1 = "abcde", text2 = "ace" 
          Output: 3  
          Explanation: The longest common subsequence is "ace" and its length is 3.

Solution :

int solve(int n,int m,string text1, string text2,vector<vector<int>>& dp){
        if(n==0 || m==0)
            return 0;  
        if(dp[n][m]!=-1)
            return dp[n][m];   
        if(text1[n-1]==text2[m-1]){
            return dp[n][m]=1+solve(n-1,m-1,text1,text2,dp);
        }
        else{
            return dp[n][m]=max(solve(n-1,m,text1,text2,dp),solve(n,m-1,text1,text2,dp));
        }
    }
    int longestCommonSubsequence(string text1, string text2) {
        // recursion + memoization : giving TLE
        // int n=text1.size();
        // int m=text2.size();
        // vector<vector<int>> dp(n,vector<int>(m,-1));
        // return solve(n,m,text1,text2,dp);

        // tabulation
        // int n=text1.size();
        // int m=text2.size();
        // vector<vector<int>> dp(n+1,vector<int>(m+1,0));
        // for(int i=1;i<=n;i++){
        //     for(int j=1;j<=m;j++){
        //         if(text1[i-1]==text2[j-1]){
        //             dp[i][j]=1+dp[i-1][j-1];
        //         }
        //         else{
        //             dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
        //         }
        //     }
        // }
        // return dp[n][m];

        //space optimization
        int n=text1.size();
        int m=text2.size();
        vector<int> curr(m+1,0);
        vector<int> prev(m+1,0);
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(text1[i-1]==text2[j-1]){
                    curr[j]=1+prev[j-1];
                }
                else{
                    curr[j]=max(prev[j],curr[j-1]);
                }
            }
            prev=curr;
        }
        return prev[m];
    }
