Problem : You are given an array prices where prices[i] is the price of a given stock on the ith day.
          Find the maximum profit you can achieve. You may complete at most two transactions.
          Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).
          
          Example 1:
          Input: prices = [3,3,5,0,0,3,1,4]
          Output: 6
          Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
          Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.

Solution : 

int solve(int index,int buy,int limit,vector<int>& prices,vector<vector<vector<int>>>& dp{
        if(index==prices.size()){
            return 0;
        }
        if(limit==0)
            return 0;
        if(dp[index][buy][limit]!=-1)
            return dp[index][buy][limit];
        if(buy==1){
            int profit1=-prices[index]+solve(index+1,0,limit,prices,dp);
            int profit2=solve(index+1,1,limit,prices,dp);
            return dp[index][buy][limit]=max(profit1,profit2);
        }
        else{
            int profit1=prices[index]+solve(index+1,1,limit-1,prices,dp);
            int profit2=solve(index+1,0,limit,prices,dp);
            return dp[index][buy][limit]=max(profit1,profit2);
        }
    }
    int maxProfit(vector<int>& prices) {
        // without recursion and dp best and optimal solution
        // int buy1=INT_MAX;
        // int buy2=INT_MAX;
        // int profit1=0;
        // int profit2=0;
        // int n=prices.size();
        // for(int i=0;i<n;i++){
        //     buy1=min(buy1,prices[i]);
        //     profit1=max(profit1,prices[i]-buy1);
        //     buy2=min(buy2,prices[i]-profit1);
        //     profit2=max(profit2,prices[i]-buy2);
        // }
        // return profit2;

        // recursion + memoization
        // int buy=1;
        // int index=0;
        // int limit=2;
        // int n=prices.size();
        // vector<vector<vector<int>>> dp(n+1,vector<vector<int>>(2,vector<int>(3,-1)));
        // return solve(index,buy,limit,prices,dp);
        
        // tabulation
        // int n=prices.size();
        // vector<vector<vector<int>>> dp(n+1,vector<vector<int>>(2,vector<int>(3,0)));
        // for(int index=n-1;index>=0;index--){
        //     for(int buy=0;buy<=1;buy++){
        //         for(int limit=1;limit<=2;limit++){
        //             if(buy==1){
        //                 int profit1=-prices[index]+dp[index+1][0][limit];
        //                 int profit2=dp[index+1][1][limit];
        //                 dp[index][buy][limit]=max(profit1,profit2);
        //             }
        //             else{
        //                 int profit1=prices[index]+dp[index+1][1][limit-1];
        //                 int profit2=dp[index+1][0][limit];
        //                 dp[index][buy][limit]=max(profit1,profit2);
        //             }
        //         }
        //     }
        // }
        // return dp[0][1][2];

        // space optimization
        int n=prices.size();
        vector<vector<int>> curr(2,vector<int>(3,0));
        vector<vector<int>> next(2,vector<int>(3,0));
        for(int index=n-1;index>=0;index--){
            for(int buy=0;buy<=1;buy++){
                for(int limit=1;limit<=2;limit++){
                    if(buy==1){
                        int profit1=-prices[index]+next[0][limit];
                        int profit2=next[1][limit];
                        curr[buy][limit]=max(profit1,profit2);
                    }
                    else{
                        int profit1=prices[index]+next[1][limit-1];
                        int profit2=next[0][limit];
                        curr[buy][limit]=max(profit1,profit2);
                    }
                }
            }
            next=curr;
        }
        return next[1][2];
    }
