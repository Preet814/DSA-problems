Problem : 
Sample Input 1:
2
3
1 2 4
4
2 1 4 9
Sample Output 1:
5
11

Solution :

int solve(vector<int>& nums,int index,int n,vector<int>& dp){
    if(index>=n)
        return 0;
    if(dp[index]!=-1)
        return dp[index];
    int take=nums[index]+solve(nums,index+2,n,dp);
    int nottake=solve(nums,index+1,n,dp);
    dp[index]=max(take,nottake);
    return dp[index];
}
int maximumNonAdjacentSum(vector<int> &nums){
    // recursion + memoization
    // int n=nums.size();
    // vector<int> dp(n+1,-1);
    // int ans=solve(nums,0,n,dp);
    // return ans;

    // tabulation
    // int n=nums.size();
    // vector<int> dp(n,0);
    // dp[0]=nums[0];
    // for(int i=1;i<n;i++){
    //     int take=nums[i]+dp[i-2];
    //     int nottake=dp[i-1]+0;
    //     dp[i]=max(take,nottake);
    // }
    // return dp[n-1];

    // space optimization
    // int n=nums.size();
    // int prev2=0;
    // int prev1=nums[0];
    // for(int i=1;i<n;i++){
    //     int take=nums[i]+prev2;
    //     int nottake=prev1+0;
    //     int ans=max(take,nottake);
    //     prev2=prev1;
    //     prev1=ans;
    // }
    // return prev1;
}
