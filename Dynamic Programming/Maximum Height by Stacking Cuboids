Problem : Given n cuboids where the dimensions of the ith cuboid is cuboids[i] = [widthi, lengthi, heighti] (0-indexed). Choose a subset of cuboids and place them on each other.
          You can place cuboid i on cuboid j if widthi <= widthj and lengthi <= lengthj and heighti <= heightj. You can rearrange any cuboid's dimensions by rotating 
          it to put it on another cuboid.
          Return the maximum height of the stacked cuboids.
          
          Example 1:
          Input: cuboids = [[50,45,20],[95,37,53],[45,23,12]]
          Output: 190
          Explanation:
          Cuboid 1 is placed on the bottom with the 53x37 side facing down with height 95.
          Cuboid 0 is placed next with the 45x20 side facing down with height 50.
          Cuboid 2 is placed next with the 23x12 side facing down with height 45.
          The total height is 95 + 50 + 45 = 190.

Solution :

bool check(vector<int> base,vector<int> newBox){
        if(newBox[0]<=base[0] && newBox[1]<=base[1] && newBox[2]<=base[2])
            return true;
        else
            return false;
    }
    int solve(int n,vector<vector<int>>& cuboids){
        vector<int> curr(n+1,0);
        vector<int> next(n+1,0);
        for(int currIndex=n-1;currIndex>=0;currIndex--){
            for(int prevIndex=currIndex-1;prevIndex>=-1;prevIndex--){
                int include=0;
                if(prevIndex==-1 || check(cuboids[currIndex],cuboids[prevIndex])){
                    include=cuboids[currIndex][2]+next[currIndex+1];
                }
                int exclude=next[prevIndex+1];
                curr[prevIndex+1]=max(include,exclude);
            }
            next=curr;
        }
        return next[0];
    }
    int maxHeight(vector<vector<int>>& cuboids) {
        for(auto &a:cuboids){
            sort(a.begin(),a.end());
        }
        sort(cuboids.begin(),cuboids.end());
        return solve(cuboids.size(),cuboids);
    }
