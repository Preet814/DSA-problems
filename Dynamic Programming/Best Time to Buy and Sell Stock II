Problem : You are given an integer array prices where prices[i] is the price of a given stock on the ith day.
          On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then 
          immediately sell it on the same day.
          Find and return the maximum profit you can achieve.
          
          Example 1:
          Input: prices = [7,1,5,3,6,4]
          Output: 7
          Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
          Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
          Total profit is 4 + 3 = 7.

Solution :

int solve(int index,int buy,vector<int>& prices,vector<vector<int>>& dp){
        if(index==prices.size()){
            return 0;
        }
        if(dp[index][buy]!=-1)
            return dp[index][buy];
        if(buy==1){
            int profit1=-prices[index]+solve(index+1,0,prices,dp);
            int profit2=solve(index+1,1,prices,dp);
            return dp[index][buy]=max(profit1,profit2);
        }
        else{
            int profit1=prices[index]+solve(index+1,1,prices,dp);
            int profit2=solve(index+1,0,prices,dp);
            return dp[index][buy]=max(profit1,profit2);
        }
    }
    int maxProfit(vector<int>& prices) {
        // without recursion and dp best and optimal solution
        // int minSoFar=prices[0];
        // int ans=0;
        // for(int i=1;i<prices.size();i++){
        //     int diff=prices[i]-minSoFar;
        //     if(diff>0){
        //         ans+=diff;
        //         minSoFar=prices[i];
        //     }
        //     else{
        //         minSoFar=min(minSoFar,prices[i]);
        //     }
        // }
        // return ans;

        // recursion + memoization 
        // int buy=1;
        // int index=0;
        // int n=prices.size();
        // vector<vector<int>> dp(n+1,vector<int>(2,-1));
        // return solve(index,buy,prices,dp);

        // tabulation
        // int n=prices.size();
        // vector<vector<int>> dp(n+1,vector<int>(2,0));
        // for(int index=n-1;index>=0;index--){
        //     for(int buy=0;buy<=1;buy++){
        //         if(buy==1){
        //             int profit1=-prices[index]+dp[index+1][0];
        //             int profit2=dp[index+1][1];
        //             dp[index][buy]=max(profit1,profit2);
        //         }
        //         else{
        //             int profit1=prices[index]+dp[index+1][1];
        //             int profit2=dp[index+1][0];
        //             dp[index][buy]=max(profit1,profit2);
        //         }
        //     }
        // }
        // return dp[0][1];

        // space optimization
        int n=prices.size();
        vector<int> curr(2,0);
        vector<int> next(2,0);
        for(int index=n-1;index>=0;index--){
            for(int buy=0;buy<=1;buy++){
                if(buy==1){
                    int profit1=-prices[index]+next[0];
                    int profit2=next[1];
                    curr[buy]=max(profit1,profit2);
                }
                else{
                    int profit1=prices[index]+next[1];
                    int profit2=next[0];
                    curr[buy]=max(profit1,profit2);
                }
            }
            next=curr;
        }
        return next[1];
    }
