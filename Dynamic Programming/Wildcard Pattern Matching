Problem : Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:
          '?' Matches any single character.
          '*' Matches any sequence of characters (including the empty sequence).
          The matching should cover the entire input string (not partial).
          
          Example 1:
          Input: s = "aa", p = "a"
          Output: false
          Explanation: "a" does not match the entire string "aa".

Solution :

bool solve(string& s,string& p,int i,int j,vector<vector<int>>& dp){
        if(i==0 && j==0)
            return true;
        if(i>0 && j==0)
            return false;
        if(i==0 && j>0){
            for(int index=1;index<=j;index++){
                if(p[index-1]!='*')
                    return false;
            }
            return true;
        }
        if(dp[i][j]!=-1)
            return dp[i][j];
        if(s[i-1]==p[j-1] || p[j-1]=='?'){
            return dp[i][j]=solve(s,p,i-1,j-1,dp);
        }
        else if(p[j-1]=='*'){
            return dp[i][j]=(solve(s,p,i-1,j,dp) || solve(s,p,i,j-1,dp));
        }
        else{
            return false;
        }
    }
    bool isMatch(string s, string p) {
        int n=s.length();
        int m=p.length();
        // recursion + memoization
        // vector<vector<int>> dp(n+1,vector<int>(m+1,-1));
        // return solve(s,p,n,m,dp);

        // tabulation
        // vector<vector<int>> dp(n+1,vector<int>(m+1,0));
        // dp[0][0]=true;
        // for (int j = 0; j < p.size() && p[j] == '*'; ++j) {
        //     dp[0][j + 1] = true;
        // }
        // for(int i=1;i<=n;i++){
        //     for(int j=1;j<=m;j++){
        //         if(s[i-1]==p[j-1] || p[j-1]=='?'){
        //             dp[i][j]=dp[i-1][j-1];
        //         }
        //         else if(p[j-1]=='*'){
        //             dp[i][j]=(dp[i-1][j] || dp[i][j-1]);
        //         }
        //         else{
        //             dp[i][j]=false;
        //         }
        //     }
        // }
        // return dp[n][m];

        // space optimization
        vector<int> curr(m+1,0);
        vector<int> prev(m+1,0);
        prev[0]=true;
        for (int j = 0; j < p.size() && p[j] == '*'; ++j) {
            prev[j + 1] = true;
        }
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(s[i-1]==p[j-1] || p[j-1]=='?'){
                    curr[j]=prev[j-1];
                }
                else if(p[j-1]=='*'){
                    curr[j]=(prev[j] || curr[j-1]);
                }
                else{
                    curr[j]=false;
                }
            }
            prev=curr;
        }
        return prev[m];
    }
