Problem : Given an m x n binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.

Example 1:
Input: matrix = [["1","0","1","0","0"],
                ["1","0","1","1","1"],
                ["1","1","1","1","1"],
                ["1","0","0","1","0"]]
Output: 4

Solution :

int solve(vector<vector<char>>& matrix,int i,int j,int row,int col,int& maxi,vector<vector<int>>& dp){
        if(i>=row || j>=col){
            return 0;
        }
        if(dp[i][j]!=-1)
            return dp[i][j];
        int right=solve(matrix,i,j+1,row,col,maxi,dp);
        int diagonal=solve(matrix,i+1,j+1,row,col,maxi,dp);
        int down=solve(matrix,i+1,j,row,col,maxi,dp );
        if(matrix[i][j]=='1'){
            dp[i][j]=1+min(right,min(down,diagonal));
            maxi=max(maxi,dp[i][j]);
            return dp[i][j];
        }
        else{
            return dp[i][j]=0;
        }
    }
    int maximalSquare(vector<vector<char>>& matrix) {
        // recursion + memoization
        // int i=0;
        // int j=0;
        // int row=matrix.size();
        // int col=matrix[0].size();
        // int maxi=0;
        // vector<vector<int>> dp(row,vector<int>(col,-1));
        // int ans=solve(matrix,i,j,row,col,maxi,dp);
        // return maxi*maxi;

        //tabulation
        // int row=matrix.size();
        // int col=matrix[0].size();
        // int maxi=0;
        // vector<vector<int>> dp(row+1,vector<int>(col+1,0));
        // for(int i=row-1;i>=0;i--){
        //     for(int j=col-1;j>=0;j--){
        //         int right=dp[i][j+1];
        //         int diagonal=dp[i+1][j+1];
        //         int down=dp[i+1][j];
        //         if(matrix[i][j]=='1'){
        //             dp[i][j]=1+min(right,min(down,diagonal));
        //             maxi=max(maxi,dp[i][j]);
        //         }
        //     }
        // }
        // return maxi*maxi;

        // space optimization
        int row=matrix.size();
        int col=matrix[0].size();
        int maxi=0;
        vector<int> curr(col+1,0);
        vector<int> next(col+1,0);
        for(int i=row-1;i>=0;i--){
            for(int j=col-1;j>=0;j--){
                int right=curr[j+1];
                int diagonal=next[j+1];
                int down=next[j];
                if(matrix[i][j]=='1'){
                    curr[j]=1+min(right,min(down,diagonal));
                    maxi=max(maxi,curr[j]);
                }
                else{
                    curr[j]=0;
                }
            }
            next=curr;
        }
        return maxi*maxi;
    }
