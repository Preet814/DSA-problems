Problem : You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.
          Find the maximum profit you can achieve. You may complete at most k transactions: i.e. you may buy at most k times and sell at most k times.
          Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).
          
          Example 1:
          Input: k = 2, prices = [2,4,1]
          Output: 2
          Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.

Solution :

int solve(int i,int buy,int limit,vector<int>& prices,vector<vector<vector<int>>>& dp){
        if(i==prices.size())
            return 0;
        if(limit==0)
            return 0;
        if(dp[i][buy][limit]!=-1)
            return dp[i][buy][limit];
        if(buy==1){
            int profit1=-prices[i]+solve(i+1,0,limit,prices,dp);
            int profit2=solve(i+1,1,limit,prices,dp);
            return dp[i][buy][limit]=max(profit1,profit2);
        }
        else{
            int profit1=prices[i]+solve(i+1,1,limit-1,prices,dp);
            int profit2=solve(i+1,0,limit,prices,dp);
            return dp[i][buy][limit]=max(profit1,profit2);
        }
    }
    int maxProfit(int k, vector<int>& prices) {
        // recursion + memoization
        // int index=0;
        // int buy=1;
        // int n=prices.size();
        // int limit=k;
        // vector<vector<vector<int>>> dp(n+1,vector<vector<int>>(2,vector<int>(k+1,-1)));
        // return solve(index,buy,limit,prices,dp);

        // tabulation
        // int n=prices.size();
        // vector<vector<vector<int>>> dp(n+1,vector<vector<int>>(2,vector<int>(k+1,0)));
        // for(int index=n-1;index>=0;index--){
        //     for(int buy=0;buy<=1;buy++){
        //         for(int limit=1;limit<=k;limit++){
        //             if(buy==1){
        //                 int profit1=-prices[index]+dp[index+1][0][limit];
        //                 int profit2=dp[index+1][1][limit];
        //                 dp[index][buy][limit]=max(profit1,profit2);
        //             }
        //             else{
        //                 int profit1=prices[index]+dp[index+1][1][limit-1];
        //                 int profit2=dp[index+1][0][limit];
        //                 dp[index][buy][limit]=max(profit1,profit2);
        //             }
        //         }
        //     }
        // }
        // return dp[0][1][k];

        // space optimization
        int n=prices.size();
        vector<vector<int>> curr(2,vector<int>(k+1,0));
        vector<vector<int>> next(2,vector<int>(k+1,0));
        for(int index=n-1;index>=0;index--){
            for(int buy=0;buy<=1;buy++){
                for(int limit=1;limit<=k;limit++){
                    if(buy==1){
                        int profit1=-prices[index]+next[0][limit];
                        int profit2=next[1][limit];
                        curr[buy][limit]=max(profit1,profit2);
                    }
                    else{
                        int profit1=prices[index]+next[1][limit-1];
                        int profit2=next[0][limit];
                        curr[buy][limit]=max(profit1,profit2);
                    }
                }
            }
            next=curr;
        }
        return next[1][k];
    }
