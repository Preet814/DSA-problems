Problem : Given a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence where each word is a 
          valid dictionary word. Return all such possible sentences in any order.
          Note that the same word in the dictionary may be reused multiple times in the segmentation.
          
          Example 1:
          Input: s = "catsanddog", wordDict = ["cat","cats","and","sand","dog"]
          Output: ["cats and dog","cat sand dog"]

Solution : 

class Solution {
public:
    void solve(int idx,string s,string temp,set<string>& st,vector<string>& ans){
        if(idx>=s.length()){
            temp.pop_back();
            ans.push_back(temp);
        }
        string currStr="";
        for(int i=idx;i<s.length();i++){
            currStr+=s[i];
            if(st.find(currStr)!=st.end()){
                solve(i+1,s,temp+currStr+" ",st,ans);
            }
        }
    }
    vector<string> wordBreak(string s, vector<string>& wordDict) {
        set<string> st;
        vector<string> ans;
        for(auto it:wordDict){
            st.insert(it);
        }
        string temp="";
        solve(0,s,temp,st,ans);
        return ans;
    }
};
