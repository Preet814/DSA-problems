Problem : You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing 
          each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken 
          into on the same night.
          Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting 
          the police.

          Example 1:
          Input: nums = [1,2,3,1]
          Output: 4
          Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
          Total amount you can rob = 1 + 3 = 4.

Solution :

int take;
    int solve(vector<int>& nums,int index,int n,vector<int>& dp){
        if(index>=n){
            return 0;
        }
        if(dp[index]!=-1){
            return dp[index];
        }
        int take=nums[index]+solve(nums,index+2,n,dp);
        int nottake=solve(nums,index+1,n,dp);
        dp[index]=max(take,nottake);
        return dp[index];
    }
    int rob(vector<int>& nums) {
        // recursion + memoization
        // int n=nums.size();
        // vector<int> dp(n+1,-1);
        // int ans=solve(nums,0,n,dp);
        // return ans;

        // tabulation
        // int n=nums.size();
        // vector<int> dp(n,0);
        // dp[0]=nums[0];
        // for(int i=1;i<n;i++){
        //     if(i-2<0)
        //         take=nums[i]+0;
        //     else
        //         take=nums[i]+dp[i-2];
        //     int nottake=dp[i-1]+0;
        //     dp[i]=max(take,nottake);
        // }
        // return dp[n-1];

        // space optimization
        // int n=nums.size();
        // int prev2=0;
        // int prev1=nums[0];
        // for(int i=1;i<n;i++){
        //     int take=nums[i]+prev2;
        //     int nottake=prev1;
        //     int ans=max(take,nottake);
        //     prev2=prev1;
        //     prev1=ans;
        // }
        // return prev1;
    }
