Problem : Given an integer N denoting the Length of a line segment. You need to cut the line segment in such a way that the cut length of a line segment each time is either x ,
          y or z. Here x, y, and z are integers. After performing all the cut operations, your total number of cut segments must be maximum.
          Note: if no segment can be cut then return 0.
          
          Example 1:
          Input:
          N = 4
          x = 2, y = 1, z = 1
          Output: 4
          Explanation:Total length is 4, and the cut
          lengths are 2, 1 and 1.  We can make
          maximum 4 segments each of length 1.

Solution :

int solve(int n, int x, int y, int z,vector<int>& dp){
    	if(n==0)
    		return 0;
    	if(n<0)
    		return INT_MIN;
    	if(dp[n]!=-1)
    		return dp[n];
    	int opt1=1+solve(n-x,x,y,z,dp);
    	int opt2=1+solve(n-y,x,y,z,dp);
    	int opt3=1+solve(n-z,x,y,z,dp);
    	dp[n]=max(opt1,max(opt2,opt3));
    	return dp[n];
    }
    int maximizeTheCuts(int n, int x, int y, int z)
    {
        // recursion + memoization
    // 	vector<int> dp(n+1,-1);
    // 	int ans=solve(n,x,y,z,dp);
    // 	if(ans<0)
    // 		return 0;
    // 	return ans;
    
    	// tabulation
    // 	vector<int> dp(n+1,INT_MIN);
    // 	dp[0]=0;
    // 	for(int i=1;i<=n;i++){
    // 		if(i-x>=0){
    // 			dp[i]=max(dp[i],dp[i-x]+1);
    // 		}
    // 		if(i-y>=0){
    // 			dp[i]=max(dp[i],dp[i-y]+1);
    // 		}
    // 		if(i-z>=0){
    // 			dp[i]=max(dp[i],dp[i-z]+1);
    // 		}
    // 	}
    // 	if(dp[n]<0)
    // 		return 0;
    // 	return dp[n];
    }
