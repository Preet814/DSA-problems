Problem : Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.
          You have the following three operations permitted on a word:
          Insert a character
          Delete a character
          Replace a character
          
          Example 1:
          Input: word1 = "horse", word2 = "ros"
          Output: 3
          Explanation: 
          horse -> rorse (replace 'h' with 'r')
          rorse -> rose (remove 'r')
          rose -> ros (remove 'e')

Solution :

int solve(int i,int j,string& word1, string& word2,vector<vector<int>>& dp){
        if(i==word1.length())
            return word2.length()-j;
        if(j==word2.length())
            return word1.length()-i;
        if(dp[i][j]!=-1)
            return dp[i][j];
        if(word1[i]==word2[j])
            return dp[i][j]=solve(i+1,j+1,word1,word2,dp);
        else{
            //insert
            int opt1=1+solve(i,j+1,word1,word2,dp);
            //delete
            int opt2=1+solve(i+1,j,word1,word2,dp);
            //replace
            int opt3=1+solve(i+1,j+1,word1,word2,dp);
            return dp[i][j]=min(opt1,min(opt2,opt3));
        }
    }
    int minDistance(string word1, string word2) {
        int i=0;
        int j=0;
        int n=word1.length();
        int m=word2.length();
        // recursion + memoization
        // vector<vector<int>> dp(n,vector<int>(m,-1));
        // return solve(i,j,word1,word2,dp);

        // tabulation
        // vector<vector<int>> dp(n+1,vector<int>(m+1,0));
        // for(int j=0;j<word2.length();j++)
        //     dp[word1.length()][j]=word2.length()-j;
        // for(int i=0;i<word1.length();i++)
        //     dp[i][word2.length()]=word1.length()-i;
        // for(int i=word1.length()-1;i>=0;i--){
        //     for(int j=word2.length()-1;j>=0;j--){
        //         if(word1[i]==word2[j])
        //             dp[i][j]=dp[i+1][j+1];
        //         else{
        //             //insert
        //             int opt1=1+dp[i][j+1];
        //             //delete
        //             int opt2=1+dp[i+1][j];
        //             //replace
        //             int opt3=1+dp[i+1][j+1];
        //             dp[i][j]=min(opt1,min(opt2,opt3));
        //         }
        //     }
        // }
        // return dp[0][0];

        // space optimization
        if(word1.length()==0 && word2.length()!=0)
            return word2.length();
        if(word2.length()==0 && word1.length()!=0)
            return word1.length();    
        vector<int> curr(m+1,0);
        vector<int> next(m+1,0);
        for(int j=0;j<word2.length();j++)
            next[j]=word2.length()-j;
        for(int i=word1.length()-1;i>=0;i--){
            for(int j=word2.length()-1;j>=0;j--){
                // catch part
                curr[word2.length()]=word1.length()-i;
                if(word1[i]==word2[j])
                    curr[j]=next[j+1];
                else{
                    //insert
                    int opt1=1+curr[j+1];
                    //delete
                    int opt2=1+next[j];
                    //replace
                    int opt3=1+next[j+1];
                    curr[j]=min(opt1,min(opt2,opt3));
                }
            }
            next=curr;
        }
        return next[0];
    }
