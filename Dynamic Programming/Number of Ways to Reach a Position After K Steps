Problem : You are given two positive integers startPos and endPos. Initially, you are standing at position startPos on an 
          infinite number line. With one step, you can move either one position to the left, or one position to the right.
          Given a positive integer k, return the number of different ways to reach the position endPos starting from 
          startPos, such that you perform exactly k steps. Since the answer may be very large, return it modulo 109 + 7.
          Two ways are considered different if the order of the steps made is not exactly the same.
          Note that the number line includes negative integers.
          
          Example 1:
          Input: startPos = 1, endPos = 2, k = 3
          Output: 3
          Explanation: We can reach position 2 from 1 in exactly 3 steps in three ways:
          - 1 -> 2 -> 3 -> 2.
          - 1 -> 2 -> 1 -> 2.
          - 1 -> 0 -> 1 -> 2.
          It can be proven that no other way is possible, so we return 3.

Solution : 

class Solution {
public:
    int mod=1000000007; 
    int solve(int startPos, int endPos, int k,vector<vector<int>>& dp){
        if(startPos==endPos && k==0)
            return 1;
        if(k==0)
            return 0;
        if(dp[startPos+999][k]!=-1)
            return dp[startPos+999][k];
        return dp[startPos+999][k]=((solve(startPos+1,endPos,k-1,dp))%mod+(solve(startPos-1,endPos,k-1,dp))%mod)%mod;
    }
    int numberOfWays(int startPos, int endPos, int k) {
        // why dp ka size 3000 ?
        // coz dp can't be negative indexed so we added +999 in above recursive solution
        // now if +999 is added our range changes to 0 to 2000
        // now if we are at dp[2000] than when dp goes in above recursion than size would 
        // be 2000+999=2999 so size is 3000
        vector<vector<int>> dp(3001,vector<int>(k+1,-1));
        return solve(startPos,endPos,k,dp);
    }
};
