Problem : Given an integer n, return the number of structurally unique BST's (binary search trees) which has exactly n nodes of unique values from 1 to n.

          Example 1:
          Input: n = 3
          Output: 5

Solution : 

int solve(int n,vector<int>& dp){
        if(n<=1)
            return 1;
        if(dp[n]!=-1)
            return dp[n];
        int ans=0;
        for(int i=1;i<=n;i++){
            ans+=solve(i-1,dp)*solve(n-i,dp);
        }
        return dp[n]=ans;
    }
    int numTrees(int n) {
        // recursion + memoization
        // vector<int> dp(n+1,-1);
        // return solve(n,dp);

        // tabulation
        vector<int> dp(n+1,0);
        dp[0]=1;
        dp[1]=1;
        for(int nodes=2;nodes<=n;nodes++){
            for(int root=1;root<=nodes;root++){
                dp[nodes]+=dp[root-1]*dp[nodes-root];
            }
        }
        return dp[n];
    }
