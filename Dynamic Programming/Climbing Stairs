Problem : You are climbing a staircase. It takes n steps to reach the top.
          Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?
          
          Example 1:
          Input: n = 2
          Output: 2
          Explanation: There are two ways to climb to the top.
          1. 1 step + 1 step
          2. 2 steps

Solution :

int solve(int n,int i,vector<int>& dp){
        //base case
        if(i==n){
            return 1;
        }
        if(i>n){
            return 0;
        }
        if(dp[i]!=-1){
            return dp[i];
        }
        dp[i]=solve(n,i+1,dp)+solve(n,i+2,dp);
        return dp[i];
    }
    
    int climbStairs(int n) {
        // recursion + memoization
        vector<int> dp(n+1,-1);
        int ans=solve(n,0,dp);
        return ans;

        // tabulation
        // vector<int> dp(n+1);
        // if(n==0 || n==1){
        //     return 1;
        // }
        // dp[0]=1;
        // dp[1]=1;
        // for(int i=2;i<=n;i++){
        //     dp[i]=dp[i-1]+dp[i-2];
        // }
        // return dp[n];

        //space optimization
        // if (n == 0 || n == 1) {
        //     return 1;
        // }
        // int prev1 = 1, prev2 = 1;
        // for (int i = 2; i <= n; i++) {
        //     int curr = prev1 + prev2;
        //     prev2 = prev1;
        //     prev1 = curr;
        // }
        // return prev1;
    }
