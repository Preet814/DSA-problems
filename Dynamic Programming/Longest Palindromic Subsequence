Problem : Given a string s, find the longest palindromic subsequence's length in s.
          A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.
          
          Example 1:
          Input: s = "bbbab"
          Output: 4
          Explanation: One possible longest palindromic subsequence is "bbbb".

Solution : 

int solve(int n,int m,string s1,string s2,vector<vector<int>>& dp){
        if(n==0 || m==0)
            return 0;
        if(dp[n][m]!=-1)
            return dp[n][m];
        if(s1[n-1]==s2[m-1])
            return dp[n][m]=1+solve(n-1,m-1,s1,s2,dp);
        else{
            return dp[n][m]=max(solve(n-1,m,s1,s2,dp),solve(n,m-1,s1,s2,dp));
        }
    }
    int longestPalindromeSubseq(string s1) {
        // just take a reverse of given string and then calculate LCS from both the string
        string s2=s1;
        reverse(s2.begin(),s2.end());

        // recursion + memoization
        // int n=s1.length();
        // int m=s2.length();
        // vector<vector<int>> dp(n+1,vector<int>(m+1,-1));
        // return solve(n,m,s1,s2,dp);
        
        // tabulation
        // int n=s1.size();
        // int m=s2.size();
        // vector<vector<int>> dp(n+1,vector<int>(m+1,0));
        // for(int i=1;i<=n;i++){
        //     for(int j=1;j<=m;j++){
        //         if(s1[i-1]==s2[j-1]){
        //             dp[i][j]=1+dp[i-1][j-1];
        //         }
        //         else{
        //             dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
        //         }
        //     }
        // }
        // return dp[n][m];

        // space optimization
        int n=s1.size();
        int m=s2.size();
        vector<int> prev(m+1,0);
        vector<int> curr(m+1,0);
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(s1[i-1]==s2[j-1]){
                    curr[j]=1+prev[j-1];
                }
                else{
                    curr[j]=max(prev[j],curr[j-1]);
                }
            }
            prev=curr;
        }
        return prev[m];
    }
