Problem : You are given an Undirected Graph having unit weight, Find the shortest path from src to all the vertex and if it is unreachable to reach any vertex, then return -1 
          for that vertex.
    
          Example:
          Input:
          n = 9, m= 10
          edges=[[0,1],[0,3],[3,4],[4 ,5]
          ,[5, 6],[1,2],[2,6],[6,7],[7,8],[6,8]] 
          src=0
          Output:
          0 1 2 1 2 3 3 4 4

Solution :

vector<int> shortestPath(vector<vector<int>>& edges, int N,int M, int src){
        vector<int> adj[N];
        for(auto it:edges){
            int u=it[0];
            int v=it[1];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        vector<int> dist(N,INT_MAX);
        dist[src]=0;
        queue<pair<int,int>> q;
        q.push({src,0});
        while(!q.empty()){
            int val=q.front().first;
            int dis=q.front().second;
            q.pop();
            for(auto it:adj[val]){
                if(dis+1<dist[it]){
                    dist[it]=dist[val]+1;
                    q.push({it,dist[it]});
                }
            }
        }
        for(int i=0;i<N;i++){
            if(dist[i]==INT_MAX)
                dist[i]=-1;
        }
        return dist;
    }
