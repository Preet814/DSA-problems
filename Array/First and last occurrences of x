Problem: Given a sorted array arr containing n elements with possibly duplicate is to find indexes of first elements, the task is to find the first and last occurrences of 
          an element x in the given array.
          Note: If the number x is not found in the array then return both the indices as -1.

          Example 1:
          Input:
          n=9, x=5
          arr[] = { 1, 3, 5, 5, 5, 5, 67, 123, 125 }
          Output:  
          2 5
          Explanation: 
          First occurrence of 5 is at index 2 and last occurrence of 5 is at index 5. 

Solution:

int findFirstOccurence(int arr[],int n,int target){
        int s=0;
        int e=n-1;
        int ans=-1;
        while(s<=e){
            int mid=s+(e-s)/2;
            if(arr[mid]==target){
                ans=mid;
                e=mid-1;
            }
            else if(arr[mid]<target){
                s=mid+1;
            }
            else{
                e=mid-1;
            }
        }
        return ans;
    }
    int findLastOccurence(int arr[],int n,int target){
        int s=0;
        int e=n-1;
        int ans=-1;
        while(s<=e){
            int mid=s+(e-s)/2;
            if(arr[mid]==target){
                ans=mid;
                s=mid+1;
            }
            else if(arr[mid]<target){
                s=mid+1;
            }
            else{
                e=mid-1;
            }
        }
        return ans;
    }
    vector<int> find(int arr[], int n , int x )
    {
        return {findFirstOccurence(arr,n,x),findLastOccurence(arr,n,x)};
    }
