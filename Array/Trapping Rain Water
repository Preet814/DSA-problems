Problem: Given an array arr[] of N non-negative integers representing the height of blocks. If width of each block is 1, compute how much water can be trapped between the 
          blocks during the rainy season. 
 
          Example 1:
          Input:
          N = 6
          arr[] = {3,0,0,2,0,4}
          Output:
          10

Solution: 

          class Solution{
          
              // Function to find the trapped water between the blocks.
              public:
              long long trappingWater(int arr[], int n){
                  int l=0;
                  int r=n-1;
                  long long leftMax=0;
                  long long rightMax=0;
                  long long res=0;
                  while(l<=r){
                      if(arr[l]<=arr[r]){
                          if(arr[l]>=leftMax){
                              leftMax=arr[l];
                          }
                          else{
                              res=res+(leftMax-arr[l]);
                          }
                          l++;
                      }
                      else{
                          if(arr[r]>=rightMax){
                              rightMax=arr[r];
                          }
                          else{
                              res=res+(rightMax-arr[r]);
                          }
                          r--;
                      }
                  }
                  return res;
              }
          };

