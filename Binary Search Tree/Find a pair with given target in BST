Problem: Given a Binary Search Tree and a target sum. Check whether there's a pair of Nodes in the BST with value summing up to the target sum. 

          Example 1:
          Input:
                  2
                /   \
               1     3
          sum = 5
          Output: 1 
          Explanation: 
          Nodes with value 2 and 3 sum up to 5.

Solution:

void inorder(Node* root,vector<int>& ans){
        if(root==NULL)
            return;
        inorder(root->left,ans);
        ans.push_back(root->data);
        inorder(root->right,ans);
    }
    int isPairPresent(struct Node *root, int target)
    {
        vector<int> ans;
        inorder(root,ans);
        int s=0;
        int e=ans.size()-1;
        int result=0;
        while(s<=e){
            if(ans[s]+ans[e]==target){
                result=1;
                break;
            }
            else if(ans[s]+ans[e]>target){
                e--;
            }
            else{
                s++;
            }
        }
        return result;
    }
