Problem : Given a binary tree root, return the maximum sum of all keys of any sub-tree which is also a Binary Search Tree (BST).
          Assume a BST is defined as follows:
          The left subtree of a node contains only nodes with keys less than the node's key.
          The right subtree of a node contains only nodes with keys greater than the node's key.
          Both the left and right subtrees must also be binary search trees.
           
          Example 1:
          Input: root = [1,4,3,2,4,2,5,null,null,null,null,null,null,4,6]
          Output: 20
          Explanation: Maximum sum in a valid Binary search tree is obtained in root node with key equal to 3.

Solution : 

class Solution {
public:
    class info{
        public:
            int maxi,mini;
            bool isBST;
            int sum;
    };
    info solve(TreeNode* root,int& ans){
        if(root==NULL){
            return {INT_MIN,INT_MAX,true,0};
        }
        info left=solve(root->left,ans);
        info right=solve(root->right,ans);
        info currNode;
        currNode.sum=left.sum+right.sum+root->val;
        currNode.maxi=max(root->val,right.maxi);
        currNode.mini=min(root->val,left.mini);
        if(left.isBST && right.isBST && (root->val<right.mini) && root->val>left.maxi){
            currNode.isBST=true;
        }
        else
            currNode.isBST=false;
        if(currNode.isBST==true){
            ans=max(ans,currNode.sum);
        }
        return currNode;
    }
    int maxSumBST(TreeNode* root) {
        int ans=0;
        info temp=solve(root,ans);
        return ans;
    }
};
