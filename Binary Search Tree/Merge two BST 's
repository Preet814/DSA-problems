Problem: Given two BSTs, return elements of both BSTs in sorted form.

          Example 1:
          Input:
          BST1:
                 5
               /   \
              3     6
             / \
            2   4  
          BST2:
                  2
                /   \
               1     3
                      \
                       7
                      /
                     6
          Output: 1 2 2 3 3 4 5 6 6 7
          Explanation: 
          After merging and sorting the
          two BST we get 1 2 2 3 3 4 5 6 6 7.

Solution:

void inorder(Node* root,vector<int>& ans){
        if(root==NULL)
            return;
        inorder(root->left,ans);
        ans.push_back(root->data);
        inorder(root->right,ans);
    }
    vector<int> mergeTwoSortedArray(vector<int>& arr1,vector<int>& arr2){
        vector<int> arr3;
        int n1=arr1.size();
        int n2=arr2.size();
        int i=0,j=0;
        while(i<n1 && j<n2){
            if(arr1[i]<=arr2[j]){
                arr3.push_back(arr1[i++]);
            }
            else{
                arr3.push_back(arr2[j++]);
            }
        }
        while(i<n1){
            arr3.push_back(arr1[i++]);
        }
        while(j<n2){
            arr3.push_back(arr2[j++]);
        }
        return arr3;
    }
    vector<int> merge(Node *root1, Node *root2)
    {
       vector<int> ans1;
       vector<int> ans2;
       inorder(root1,ans1);
       inorder(root2,ans2);
       vector<int> result=mergeTwoSortedArray(ans1,ans2);
       return result;
    }
