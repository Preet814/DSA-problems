Problem: Given the root of a binary tree. Check whether it is a BST or not.
          Note: We are considering that BSTs can not contain duplicate Nodes.
          A BST is defined as follows:
          The left subtree of a node contains only nodes with keys less than the node's key.
          The right subtree of a node contains only nodes with keys greater than the node's key.
          Both the left and right subtrees must also be binary search trees.
           
          Example 1:
          Input:
             2
           /    \
          1      3
          Output: 1 
          Explanation: 
          The left subtree of root node contains node
          with key lesser than the root nodes key and 
          the right subtree of root node contains node 
          with key greater than the root nodes key.
          Hence, the tree is a BST.

Solution:

bool bst(TreeNode* root,long max,long min){
        if(root==NULL)
            return true;
        if((root->val>min) && (root->val<max)){
            bool left=bst(root->left,root->val,min);
            bool right=bst(root->right,max,root->val);
            return left&&right;
        } 
        else
            return false;
    }
    bool isValidBST(TreeNode* root) {
        return bst(root,LONG_MAX,LONG_MIN);
    }
