Problem : Given the root of a binary search tree and the lowest and highest boundaries as low and high, trim the tree so that 
          all its elements lies in [low, high]. Trimming the tree should not change the relative structure of the elements 
          that will remain in the tree (i.e., any node's descendant should remain a descendant). It can be proven that there 
          is a unique answer.
          Return the root of the trimmed binary search tree. Note that the root may change depending on the given bounds.
          
          Example 2:
          Input: root = [3,0,4,null,2,null,null,1], low = 1, high = 3
          Output: [3,2,null,1]

Solution : 

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void solve(TreeNode* root, int low, int high){
        if(root==NULL)
            return;
        while(root->left!=NULL){
            if(root->left->val<low)
                root->left=root->left->right;
            else if(root->left->val>high)
                root->left=root->left->left;
            else
                break;
        }
        while(root->right!=NULL){
            if(root->right->val<low)
                root->right=root->right->right;
            else if(root->right->val>high)
                root->right=root->right->left;
            else
                break;
        }
        solve(root->left,low,high);
        solve(root->right,low,high);
    }
    TreeNode* trimBST(TreeNode* root, int low, int high) {
        TreeNode* dummy=new TreeNode(INT_MAX);
        dummy->left=root;
        solve(dummy,low,high);
        return dummy->left;
    }
};
