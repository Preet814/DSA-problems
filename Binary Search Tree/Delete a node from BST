Problem: Given a Binary Search Tree and a node value X. Delete the node with the given value X from the BST. If no node with value x exists, then do not make any change. 
          
          Example 1:
          Input:
                2
              /   \
             1     3
          X = 12
          Output: 1 2 3
          Explanation: In the given input there
          is no node with value 12 , so the tree
          will remain same.

Solution:

int Min(Node* root){
    Node* temp=root;
    while(temp->left!=NULL){
        temp=temp->left;
    }
    return temp->data;
}
Node *deleteNode(Node *root, int X) {
    if(root==NULL)
        return root;
    if(root->data==X){
        //0child
        if(root->left==NULL && root->right==NULL){
            delete root;
            return NULL;
        }
        //1 child
        //left
        else if(root->left!=NULL && root->right==NULL){
            Node* store=root->left;
            delete root;
            return store;
        }
        //right
        if(root->left==NULL && root->right!=NULL){
            Node* store=root->right;
            delete root;
            return store;
        }
        //2child
        if(root->left!=NULL && root->right!=NULL){
            int mini=Min(root->right);
            root->data=mini;
            root->right=deleteNode(root->right,mini);
            return root;
        }
    }
    else if(X<root->data){
        root->left = deleteNode(root->left,X);
        return root;
    }
    else{
        root->right = deleteNode(root->right,X);
        return root;
    }
}
