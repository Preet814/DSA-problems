Problem: Given a stack, delete the middle element of the stack without using any additional data structure.
        Middle element:- floor((size_of_stack+1)/2) (1-based indexing) from bottom of the stack.
        Note: The output shown by the compiler is the stack from top to bottom.
           
          Example 1:
          Input: 
          Stack = {10, 20, 30, 40, 50}
          Output:
          ModifiedStack = {10, 20, 40, 50}
          Explanation:
          If you print the stack the bottom-most element will be 10 and the top-most element will be 50. Middle element will be element at index 3 from bottom, which is 30. 
          Deleting 30, stack will look like {10 20 40 50}.

Solution: class Solution
          {
              public:
              //Function to delete middle element of a stack.
              void solve(stack<int>&s, int sizeOfStack, int count){
                      //Base Case
                      if(count==sizeOfStack/2){
                      s.pop();
                      return;
                  }
                  
                  int num=s.top();
                  s.pop();
                  //Recursive Call
                  solve(s,sizeOfStack,count+1);
                  s.push(num);
              }
              void deleteMid(stack<int>&s, int sizeOfStack)
              {
                  int count=0;
                  solve(s,sizeOfStack,count);
              }
          };
