Problem: Design your implementation of the circular double-ended queue (deque).
          Implement the MyCircularDeque class:
          MyCircularDeque(int k) Initializes the deque with a maximum size of k.
          boolean insertFront() Adds an item at the front of Deque. Returns true if the operation is successful, or false otherwise.
          boolean insertLast() Adds an item at the rear of Deque. Returns true if the operation is successful, or false otherwise.
          boolean deleteFront() Deletes an item from the front of Deque. Returns true if the operation is successful, or false otherwise.
          boolean deleteLast() Deletes an item from the rear of Deque. Returns true if the operation is successful, or false otherwise.
          int getFront() Returns the front item from the Deque. Returns -1 if the deque is empty.
          int getRear() Returns the last item from Deque. Returns -1 if the deque is empty.
          boolean isEmpty() Returns true if the deque is empty, or false otherwise.
          boolean isFull() Returns true if the deque is full, or false otherwise.
           
          
          Example 1: 
          Input
          ["MyCircularDeque", "insertLast", "insertLast", "insertFront", "insertFront", "getRear", "isFull", "deleteLast", "insertFront", "getFront"]
          [[3], [1], [2], [3], [4], [], [], [], [4], []]
          Output
          [null, true, true, true, false, 2, true, true, true, 4]
          
          Explanation
          MyCircularDeque myCircularDeque = new MyCircularDeque(3);
          myCircularDeque.insertLast(1);  // return True
          myCircularDeque.insertLast(2);  // return True
          myCircularDeque.insertFront(3); // return True
          myCircularDeque.insertFront(4); // return False, the queue is full.
          myCircularDeque.getRear();      // return 2
          myCircularDeque.isFull();       // return True
          myCircularDeque.deleteLast();   // return True
          myCircularDeque.insertFront(4); // return True
          myCircularDeque.getFront();     // return 4

Solution:

          class MyCircularDeque {
              int *arr;
              int size;
              int front;
              int rear;
          public:
              MyCircularDeque(int k) {
                  size=k;
                  arr=new int [size];
                  front =-1;
                  rear =-1;
              }
              
              bool insertFront(int value) {
                   if(isFull()){
                      // cout<<"queue is full";
                      return false;
                  }
                  // for first element push
                   if(front==-1 && rear==-1){
                      front = rear =0;
                  }
                  else if(front == 0){  
                     front=size-1;
                  }
                  else{
                      front--;
                  }
                  arr[front]=value;
          
                  return true;
              }
              
              bool insertLast(int value) {
                    if(isFull()){
                      // cout<<"queue is full";
                      return false;
                  }
                  // for first element push
                   if(front==-1 && rear==-1){
                      front = rear =0;
                  }
                  else{  
                      rear=(rear+1)%size;
                  }
                  arr[rear]=value;
          
                  return true;
              }
              
              bool deleteFront() {
                  if(isEmpty()){ //to check queue is empty
                      return false;
                  }
                  int ans=arr[front];
                  arr[front]=-1;
                   if (front==rear){ //single element is present
                      front=rear=-1;
                  }
                  else {
                      front=(front+1)%size;
                  }
                  return true;
              }
              
              bool deleteLast() {
                   if(isEmpty()){
                      return false;
                  }
                  int ans=arr[rear];
                  arr[rear]=-1;
          
                  if(front==rear){
                      front=rear=-1;
                  }
                  else if(rear==0){
                      rear=size-1;
                  }
                  else{
                      rear--;
                  }
                  return true;
              }
              
              int getFront() {
                   if(isEmpty()){
                      return -1;
                  }
                  else{
                      return arr[front];
                  }
              }
              
              int getRear() {
                  if(isEmpty()){
                      return -1;
                  }
                  else{
                      return arr[rear];
                  }
              }
              
              bool isEmpty() {
                  if(front==-1 && rear==-1){ //to check queue is empty
                      return true;
                  }
                  else{
                      return false;
                  }
              }
              
              bool isFull() {
                  if((rear+1)%size==front){
                      // cout<<"queue is full";
                      return true;
                   } else {
                      return false;
                   }
              }
          };
