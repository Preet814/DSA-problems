Problem: Design a data structure that works like a LRU Cache. Here cap denotes the capacity of the cache and Q denotes the number of queries. Query can be of two types:
          SET x y: sets the value of the key x with value y
          GET x: gets the key of x if present else returns -1.
          
          The LRUCache class has two methods get() and set() which are defined as follows.
          get(key): returns the value of the key if it already exists in the cache otherwise returns -1.
          set(key, value): if the key is already present, update its value. If not present, add the key-value pair to the cache. If the cache reaches its capacity it 
          should invalidate the least recently used item before inserting the new item.
          In the constructor of the class the capacity of the cache should be initialized.

          Example 1:
          Input:
          cap = 2
          Q = 8
          Queries = SET 1 2 SET 2 3 SET 1 5
          SET 4 5 SET 6 7 GET 4 SET 1 2 GET 3
          Output: 5 -1
          Explanation: 
          Cache Size = 2
          SET 1 2 : 1 -> 2
          
          SET 2 3 : 1 -> 2, 2 -> 3 (the most recently 
          used one is kept at the rightmost position) 
          
          SET 1 5 : 2 -> 3, 1 -> 5
          
          SET 4 5 : 1 -> 5, 4 -> 5 (Cache size is 2, hence 
          we delete the least recently used key-value pair)
          
          SET 6 7 : 4 -> 5, 6 -> 7 
          
          GET 4 : Prints 5 (The cache now looks like
          6 -> 7, 4->5)
          
          SET 1 2 : 4 -> 5, 1 -> 2 
          (Cache size is 2, hence we delete the least 
          recently used key-value pair)
          
          GET 3 : No key value pair having 
          key = 3. Hence, -1 is printed.


Solution:

class LRUCache
{
    private:
    class Node {
        public:
        int key;
        int val;
        Node *prev, *next;
        
        Node(int k, int v) {
            key = k;
            val = v;
            prev = next = nullptr;
        }
    };
    
    Node *head = new Node(-1, -1);
    Node *tail = new Node(-1, -1);
    unordered_map<int, Node*> mp;
    int size;
    
    void addNode(Node *ptr) {
        ptr->prev = head;
        ptr->next = head->next;
        head->next->prev = ptr;
        head->next = ptr;
    }
    
    void deleteNode(Node *ptr) {
        Node *next_of_ptr = ptr->next;
        Node *prev_of_ptr = ptr->prev;
        
        prev_of_ptr->next = next_of_ptr;
        next_of_ptr->prev = prev_of_ptr;
        
        delete ptr;
    }
    
    public:
    
    LRUCache(int cap)
    {
        size = cap;
        head->next = tail;
        tail->prev = head;
    }
    
    int GET(int key)
    {
        if(mp.find(key) != mp.end()) {
            Node* resnode = mp[key];
            int res = resnode->val;
            deleteNode(resnode);

            Node *newNode = new Node(key, res);
            addNode(newNode);
            mp[key] = newNode;
            
            return res;
        }
        return -1;
    }
    
    void SET(int key, int value)
    {
        if(mp.find(key) != mp.end()) {
            Node* resnode = mp[key];
            deleteNode(resnode);
        }
        else if(mp.size() == size) {
            mp.erase(tail->prev->key);
            deleteNode(tail->prev);
        }
        
        Node *newNode = new Node(key, value);
        addNode(newNode);
        mp[key] = newNode;
    }
};
