Problem: Given a grid of dimension nxm where each cell in the grid can have values 0, 1 or 2 which has the following meaning:
          0 : Empty cell
          1 : Cells have fresh oranges
          2 : Cells have rotten oranges
          
          We have to determine what is the minimum time required to rot all oranges. A rotten orange at index [i,j] can rot other fresh orange at indexes [i-1,j], [i+1,j], 
          [i,j-1], [i,j+1] (up, down, left and right) in unit time. 
           
          
          Example 1:
          Input: grid = {{0,1,2},{0,1,2},{2,1,1}}
          Output: 1
          Explanation: The grid is-
          0 1 2
          0 1 2
          2 1 1
          Oranges at positions (0,2), (1,2), (2,0)
          will rot oranges at (0,1), (1,1), (2,2) and 
          (2,1) in unit time.

Solution:

int orangesRotting(vector<vector<int>>& grid) {
        // Code here
        int n = grid.size();
        int m = grid[0].size();
        
        queue<pair<pair<int,int>,int>> q;
        vector<vector<int>> visit(n,vector<int>(m,0)); 
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j] == 2){
                    q.push({{i,j},0});
                    visit[i][j] = 1;
                }
            }
        }
        int time = 0;
        int delrow[] = {-1,0,+1,0};
        int delcol[] = {0,+1,0,-1};
        
        while(!q.empty()){
            int row = q.front().first.first;
            int col = q.front().first.second;
            int t = q.front().second;
            time = max(time,t);
            q.pop();
            
            for(int i=0;i<4;i++){
                int nrow = row+delrow[i];
                int ncol = col+delcol[i];
                
                if(nrow<0 || nrow >= n || ncol <0 || ncol >= m)
                    continue;
                    
                if(grid[nrow][ncol]==1 && !visit[nrow][ncol]){
                    q.push({{nrow,ncol},t+1});
                    visit[nrow][ncol] = 1;
                }
            }
        }
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j] == 1 && visit[i][j]!=1) return -1;
            }
        }
        return time;
        
    }
