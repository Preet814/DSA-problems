Problem: A celebrity is a person who is known to all but does not know anyone at a party. If you go to a party of N people, find if there is a 
          celebrity in the party or not.A square NxN matrix M[][] is used to represent people at the party such that if an element of row i and 
          column j is set to 1 it means ith person knows jth person. Here M[i][i] will always be 0.
          Note: Follow 0 based indexing.
          Follow Up: Can you optimize it to O(N)
           
          Example 1:
          Input:
          N = 3
          M[][] = {{0 1 0},
                   {0 0 0}, 
                   {0 1 0}}
          Output: 1
          Explanation: 0th and 2nd person both
          know 1. Therefore, 1 is the celebrity. 

Solution: 

          class Solution 
          {
              public:
              //Function to find if there is a celebrity in the party or not.
              int celebrity(vector<vector<int> >& M, int n) 
              {
                  stack<int> st;
                  for(int i=0;i<n;i++){
                      st.push(i);
                  }
                  while(st.size()>1){
                      int a=st.top();
                      st.pop();
                      int b=st.top();
                      st.pop();
                      if(M[a][b]==1){
                          st.push(b);
                      }
                      else{
                          st.push(a);
                      }
                  }
                  //potential candidate
                  int ans=st.top();
                  //celebrity do not know everyone - row of celebrity will contain all zeros
                  bool rowCheck=false;
                  int zeroCnt=0;
                  for(int i=0;i<n;i++){
                      if(M[ans][i]==0){
                          zeroCnt++;
                      }
                  }
                  if(zeroCnt==n){
                      rowCheck=true;
                  }
                  //all knows celebrity - celebrity column will contain all 1 except diagonal one
                  bool colCheck=false;
                  int oneCnt=0;
                  for(int i=0;i<n;i++){
                      if(M[i][ans]==1){
                          oneCnt++;
                      }
                  }
                  if(oneCnt==n-1){
                      colCheck=true;
                  }
                  
                  if(rowCheck==true && colCheck==true){
                      return ans;
                  }
                  else{
                      return -1;
                  }
              }
          };
