Problem: You are given two arrays A and B of unique elements of size N. Check if array B is a stack permutation of the array A or not.
          Stack permutation means that array B can be created from array A using a stack and stack operations.
          Example 1:

          Input:
          N = 3
          A = {1,2,3}
          B = {2,1,3}
          Output:
          1
          Explanation:
          1. push 1 from A to stack
          2. push 2 from A to stack
          3. pop 2 from stack to B
          4. pop 1 from stack to B
          5. push 3 from A to stack
          6. pop 3 from stack to B

Solution: 

class Solution{
public:
    int isStackPermutation(int  n,vector<int> &A,vector<int> &B){
        stack<int>st;
        int i=0;
        int j=0;
        for(j=0;j<n;j++)
        {
            st.push(A[j]);
            while(!st.empty() && st.top()==B[i])
            {
                st.pop();
                i++;
            }
        }
        if(i==n)return 1;
        else return 0;
    }
};
