Problem: Given a string of balanced expression, find if it contains a redundant parenthesis or not. A set of parenthesis are redundant if the same sub-expression is surrounded 
          by unnecessary or multiple brackets. Print Yes if redundant, else No.
          Note: Expression may contain + , - , *, and / operators. Given expression is valid and there are no white spaces present.
          
          Example 1:
          Input:
          exp = ((a+b))
          Output:
          Yes
          Explanation:
          ((a+b)) can reduced to (a+b).

Solution: 

        class Solution {
          public:
            int checkRedundancy(string s) {
                stack<char> st;
                for(int i=0;i<s.size();i++){
                    char ch=s[i];
                    if(ch=='(' || ch=='+' || ch=='-' || ch=='*' || ch=='/'){
                        st.push(ch);
                    }
                    else{
                        if(ch==')'){
                            bool isRedundant=true;
                            while(st.top()!='('){
                                int top=st.top();
                                if(top=='+' || top=='-' || top=='*' || top=='/'){
                                    isRedundant=false;
                                }
                                st.pop();
                            }
                            if(isRedundant==true){
                                return 1;
                            }
                            st.pop();
                        }
                    }
                }
                return 0;
            }
        };
