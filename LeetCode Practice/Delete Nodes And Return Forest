Problem : Given the root of a binary tree, each node in the tree has a distinct value.
          After deleting all nodes with a value in to_delete, we are left with a forest (a disjoint union of trees).
          Return the roots of the trees in the remaining forest. You may return the result in any order.

          Example 1:
          Input: root = [1,2,3,4,5,6,7], to_delete = [3,5]
          Output: [[1,2,null,4],[6],[7]]

Solution : 

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool arr[1001]={};
    void deleteNode(TreeNode*& root,bool flag,vector<TreeNode*>& ans){
        if(root==NULL)
            return;
        if(root->left)
            deleteNode(root->left,arr[root->val],ans);
        if(root->right)
            deleteNode(root->right,arr[root->val],ans);
        if(!arr[root->val] && flag){
            ans.push_back(root);
        }
        if(arr[root->val]){
            root=NULL;
        }
    }
    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {
        vector<TreeNode*> ans;
        for(int i=0;i<to_delete.size();i++){
            arr[to_delete[i]]=true;
        }
        deleteNode(root,true,ans);
        return ans;
    }
};
