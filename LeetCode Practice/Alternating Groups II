Problem : There is a circle of red and blue tiles. You are given an array of integers colors and an integer k. The color of 
          tile i is represented by colors[i]:
          colors[i] == 0 means that tile i is red.
          colors[i] == 1 means that tile i is blue.
          An alternating group is every k contiguous tiles in the circle with alternating colors (each tile in the group 
          except the first and last one has a different color from its left and right tiles).
          Return the number of alternating groups.
          Note that since colors represents a circle, the first and the last tiles are considered to be next to each other.
          
          Example 1:
          Input: colors = [0,1,0,1,0], k = 3
          Output: 3

Solution : 

int numberOfAlternatingGroups(vector<int>& colors, int k) {
        int cnt=0;
        colors.insert(colors.end(),colors.begin(),colors.begin()+k-1);
        int n=colors.size();
        int num=1;
        for(int i=1;i<n;i++){
            if(colors[i]!=colors[i-1]){
                num=num+1;
            }
            else{
                num=1;
            }
            if(num>=k){
                cnt++;
            }
        }
        return cnt;
}
