Problem : Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers 
          from the original list. Return the linked list sorted as well.
          
          Example 1:
          Input: head = [1,2,3,3,4,4,5]
          Output: [1,2,5]

Solution : 

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        ListNode* dummy=new ListNode(0);
        dummy->next=head;
        ListNode* prev=dummy;
        ListNode* curr=head;
        while(curr!=NULL){
            if(curr->next!=NULL && curr->val==curr->next->val){
                while(curr->next!=NULL && curr->val==curr->next->val){
                    curr=curr->next;
                }
                prev->next=curr->next;
                curr=curr->next;
            }
            else{
                prev=curr;
                curr=curr->next;
            }
        }
        return dummy->next;

        // map<int,int> mp;
        // ListNode* temp=head;
        // while(temp!=NULL){
        //     mp[temp->val]++;
        //     temp=temp->next;
        // }
        // ListNode* dummy=new ListNode(-1);
        // ListNode* node=dummy;
        // for(auto it:mp){
        //     if(it.second==1){
        //         ListNode* temp=new ListNode(it.first);
        //         node->next=temp;
        //         node=temp;
        //     }
        // }
        // return dummy->next;
    }
};
