Problem : You are given an array of integers nums and the head of a linked list. Return the head of the modified linked list 
          after removing all nodes from the linked list that have a value that exists in nums. 
          
          Example 1:
          Input: nums = [1,2,3], head = [1,2,3,4,5]
          Output: [4,5]

Solution : 

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* modifiedList(vector<int>& nums, ListNode* head) {
        set<int> s(nums.begin(),nums.end());
        ListNode* dummy=new ListNode(0);
        dummy->next=head;
        ListNode* prev=dummy;
        ListNode* curr=head;
        while(curr!=NULL){
            if(s.find(curr->val)!=s.end()){
                prev->next=curr->next;
                curr->next=NULL;
                delete(curr);
                curr=prev->next;
            }
            else{
                prev=curr;
                curr=curr->next;
            }
        }
        return dummy->next;
    }
};
