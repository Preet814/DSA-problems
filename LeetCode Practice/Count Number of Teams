Problem : There are n soldiers standing in a line. Each soldier is assigned a unique rating value.
          You have to form a team of 3 soldiers amongst them under the following rules:
          Choose 3 soldiers with index (i, j, k) with rating (rating[i], rating[j], rating[k]).
          A team is valid if: (rating[i] < rating[j] < rating[k]) or (rating[i] > rating[j] > rating[k]) where (0 <= i < j < k < n).
          Return the number of teams you can form given the conditions. (soldiers can be part of multiple teams).
          
          Example 1:
          Input: rating = [2,5,3,4,1]
          Output: 3
          Explanation: We can form three teams given the conditions. (2,3,4), (5,4,1), (5,3,1). 

Solution : 

class Solution {
public:
    int solve1(int idx,int cnt,vector<int>& arr,vector<vector<int>>& dp){
        if(cnt==3)
            return 1;
        if(dp[idx][cnt]!=-1)
            return dp[idx][cnt];
        int res=0;
        for(int i=idx+1;i<arr.size();i++){
            if(arr[i]<=arr[idx])
                continue;
            res+=solve1(i,cnt+1,arr,dp);
        }
        return dp[idx][cnt]=res;
    }
    int solve2(int idx,int cnt,vector<int>& arr,vector<vector<int>>& dp){
        if(cnt==3)
            return 1;
        if(dp[idx][cnt]!=-1)
            return dp[idx][cnt];
        int res=0;
        for(int i=idx+1;i<arr.size();i++){
            if(arr[i]>=arr[idx])
                continue;
            res+=solve2(i,cnt+1,arr,dp);
        }
        return dp[idx][cnt]=res;
    }
    int numTeams(vector<int>& arr) {
        int n=arr.size();
        int res=0;
        vector<vector<int>>dp1(n+1,vector<int>(n+1,-1));
        vector<vector<int>>dp2(n+1,vector<int>(n+1,-1));
        for(int i=0;i<n;i++){
            res+=solve1(i,1,arr,dp1);
            res+=solve2(i,1,arr,dp2);
        }
        return res;

    }
};
