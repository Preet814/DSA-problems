Problem : Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following 
          rules:
          Each row must contain the digits 1-9 without repetition.
          Each column must contain the digits 1-9 without repetition.
          Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
          Note:
          A Sudoku board (partially filled) could be valid but is not necessarily solvable.
          Only the filled cells need to be validated according to the mentioned rules.
           
          
          Example 1:
          
          Input: board = 
          [["5","3",".",".","7",".",".",".","."]
          ,["6",".",".","1","9","5",".",".","."]
          ,[".","9","8",".",".",".",".","6","."]
          ,["8",".",".",".","6",".",".",".","3"]
          ,["4",".",".","8",".","3",".",".","1"]
          ,["7",".",".",".","2",".",".",".","6"]
          ,[".","6",".",".",".",".","2","8","."]
          ,[".",".",".","4","1","9",".",".","5"]
          ,[".",".",".",".","8",".",".","7","9"]]
          Output: true

Solution : 

class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        unordered_set<char> row[9];
        unordered_set<char> col[9];
        unordered_set<char> boxes[9];
        for(int i=0;i<9;i++){
            for(int j=0;j<9;j++){
                char val=board[i][j];
                if(val=='.')
                    continue;
                int boxIdx=(i/3)*3+(j/3);
                if(row[i].count(val) || col[j].count(val) || boxes[boxIdx].count(val))
                    return false;
                row[i].insert(val);
                col[j].insert(val);
                boxes[boxIdx].insert(val);
            }
        }
        return true;
        
    }
};
