Problem : There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). 
          The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down 
          or right at any point in time.
          Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the 
          bottom-right corner.
          The test cases are generated so that the answer will be less than or equal to 2 * 109. 
          
          Example 1:
          Input: m = 3, n = 7
          Output: 28

Solution :

class Solution {
public:
    int solve(int r,int c,int m,int n,vector<vector<int>>& dp){
        if(r==m || c==n)
            return 0;
        if(r==m-1 && c==n-1){
            return 1;
        }
        if(dp[r][c]!=-1)
            return dp[r][c];
        int opt1=solve(r+1,c,m,n,dp);
        int opt2=solve(r,c+1,m,n,dp);
        dp[r][c]=opt1+opt2;
        return dp[r][c];
    }
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m,vector<int>(n,-1));
        int r=0,c=0;
        return solve(r,c,m,n,dp);
    }
};
