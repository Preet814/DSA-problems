Problem : You are given an integer array nums.A subsequence sub of nums with length x is called valid if it satisfies:
          (sub[0] + sub[1]) % 2 == (sub[1] + sub[2]) % 2 == ... == (sub[x - 2] + sub[x - 1]) % 2.
          Return the length of the longest valid subsequence of nums.
          A subsequence is an array that can be derived from another array by deleting some or no elements without changing the 
          order of the remaining elements.
          
          Example 1:
          Input: nums = [1,2,3,4]
          Output: 4
          Explanation:
          The longest valid subsequence is [1, 2, 3, 4].

Solution : 

class Solution {
public:
    int maximumLength(vector<int>& nums) {
        int len=nums.size();
        int even=0,odd=0,both=0;
        int val=nums[0]%2;
        for(int i=0;i<len;i++){
            if(nums[i]%2==0)
                even++;
            else
                odd++;
            if(nums[i]%2==val){
                both++;
                val=1-val;
            }
        }
        return max(both,max(even,odd));
    }
};
