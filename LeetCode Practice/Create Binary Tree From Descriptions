Problem : You are given a 2D integer array descriptions where descriptions[i] = [parenti, childi, isLefti] indicates that 
          parenti is the parent of childi in a binary tree of unique values. Furthermore,
          If isLefti == 1, then childi is the left child of parenti.
          If isLefti == 0, then childi is the right child of parenti.
          Construct the binary tree described by descriptions and return its root.
          The test cases will be generated such that the binary tree is valid.
          
          Example 1:
          Input: descriptions = [[20,15,1],[20,17,0],[50,20,1],[50,80,0],[80,19,1]]
          Output: [50,20,80,15,17,19]
          Explanation: The root node is the node with value 50 since it has no parent.
          The resulting binary tree is shown in the diagram.

Solution : 

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* createBinaryTree(vector<vector<int>>& desc) {
        int n=desc.size();
        map<int,TreeNode*> mp;
        set<int> children;
        for(int i=0;i<n;i++){
            int parent=desc[i][0];
            int child=desc[i][1];
            int isLeft=desc[i][2];
            children.insert(child);
            if(mp.find(parent)==mp.end()){
                mp[parent]=new TreeNode(parent);
            }
            if(mp.find(child)==mp.end()){
                mp[child]=new TreeNode(child);
            }
            if(isLeft==1)
                mp[parent]->left=mp[child];
            else
                mp[parent]->right=mp[child];
        }
        int root=-1;
        for(int i=0;i<n;i++){
            if(children.find(desc[i][0])==children.end()){
                // overall root would be one which is not present in children set but 
                // is part of description[i][0] i.e parent
                // 50 is a parent but not present in children set
                root=desc[i][0];
                break;
            }
        }
        cout<<root<<" ";
        cout<<mp[root]->val<<" ";
        return mp[root];
    }
};
