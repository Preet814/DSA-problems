Problem : Given two 0-indexed integer arrays nums1 and nums2, return a list answer of size 2 where:
          answer[0] is a list of all distinct integers in nums1 which are not present in nums2.
          answer[1] is a list of all distinct integers in nums2 which are not present in nums1.
          Note that the integers in the lists may be returned in any order.
          
          Example 1:
          Input: nums1 = [1,2,3], nums2 = [2,4,6]
          Output: [[1,3],[4,6]]
          Explanation:
          For nums1, nums1[1] = 2 is present at index 0 of nums2, whereas nums1[0] = 1 and nums1[2] = 3 are not 
          present in nums2. Therefore, answer[0] = [1,3].
          For nums2, nums2[0] = 2 is present at index 1 of nums1, whereas nums2[1] = 4 and nums2[2] = 6 are not 
          present in nums2. Therefore, answer[1] = [4,6].

Solution : 

class Solution {
public:
    vector<vector<int>> findDifference(vector<int>& nums1, vector<int>& nums2) {
        map<int,int> mp1,mp2;
        vector<vector<int>> result;
        for(int i=0;i<nums1.size();i++)
            mp1[nums1[i]]++;
        for(int i=0;i<nums2.size();i++)
            mp2[nums2[i]]++;
        vector<int> ans1,ans2;
        for(auto it:mp1){
            if(mp2.find(it.first)==mp2.end())
                ans1.push_back(it.first);
        }
        for(auto it:mp2){
            if(mp1.find(it.first)==mp1.end())
                ans2.push_back(it.first);
        }
        result.push_back(ans1);
        result.push_back(ans2);
        return result;
    }
};
