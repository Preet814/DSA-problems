Problem : Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the 
          sum of all numbers along its path.
          Note: You can only move either down or right at any point in time.
          
          Example 1:
          Input: grid = [[1,3,1],[1,5,1],[4,2,1]]
          Output: 7
          Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.
          Example 2:

Solution : 

class Solution {
public:
    int solve(int r, int c, int m, int n, vector<vector<int>>& grid,
              vector<vector<int>>& dp) {
        if (r == m || c == n)
            return 1000000;
        if (r == m - 1 && c == n - 1)
            return grid[r][c];
        if (dp[r][c] != -1)
            return dp[r][c];
        int opt1 = grid[r][c] + solve(r + 1, c, m, n, grid, dp);
        int opt2 = grid[r][c] + solve(r, c + 1, m, n, grid, dp);
        dp[r][c] = min(opt1, opt2);
        return dp[r][c];
    }
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n, -1));
        int r = 0, c = 0;
        return solve(r, c, m, n, grid, dp);
    }
};
