Problem : Given an array of integers nums, sort the array in ascending order and return it.
          You must solve the problem without using any built-in functions in O(nlog(n)) time complexity and with the smallest 
          space complexity possible.
          
          Example 1:
          Input: nums = [5,2,3,1]
          Output: [1,2,3,5]
          Explanation: After sorting the array, the positions of some numbers are not changed (for example, 2 and 3), while 
          the positions of other numbers are changed (for example, 1 and 5).

Solution :

class Solution {
public:
    
    void merge(vector<int>& nums,int s,int mid,int e){
        vector<int> ans;
        int i=s,j=mid+1;
        while(i<=mid && j<=e){
            if(nums[i]<=nums[j]){
                ans.push_back(nums[i++]);
            }
            else{
                ans.push_back(nums[j++]);
            }
        }
        while(i<=mid){
            ans.push_back(nums[i++]);
        }
        while(j<=e){
            ans.push_back(nums[j++]);
        }
        for(int i=s;i<=e;i++){
            nums[i]=ans[i-s];
        }
    }
    void mergeSort(vector<int>& nums,int s,int e){
        if(s>=e)
            return;
        int mid=(s+e)/2;
        mergeSort(nums,s,mid);
        mergeSort(nums,mid+1,e);
        merge(nums,s,mid,e);
    }
    vector<int> sortArray(vector<int>& nums) {
        int n=nums.size();
        int s=0,e=n-1;
        mergeSort(nums,s,e);
        return nums;
    }
};
