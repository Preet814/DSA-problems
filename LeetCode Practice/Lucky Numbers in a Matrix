Problem : Given an m x n matrix of distinct numbers, return all lucky numbers in the matrix in any order.
          A lucky number is an element of the matrix such that it is the minimum element in its row and maximum in its column.
          
          Example 1:
          Input: matrix = [[3,7,8],[9,11,13],[15,16,17]]
          Output: [15]
          Explanation: 15 is the only lucky number since it is the minimum in its row and the maximum in its column.

Solution : 

class Solution {
public:
    int solve(vector<vector<int>>& matrix,int k){
        int mini=INT_MAX;
        int ans=0;
        for(int i=0;i<matrix[0].size();i++){
            if(matrix[k][i]<mini){
                mini=matrix[k][i];
                ans=i;
            }
        }
        return ans;
    }
    bool check(vector<vector<int>>& matrix,int value,int k){
        for(int i=0;i<matrix.size();i++){
            if(value<matrix[i][k]){
                return false;
            }
        }
        return true;
    }
    vector<int> luckyNumbers (vector<vector<int>>& matrix) {
        int n=matrix.size();
        int m=matrix[0].size();
        vector<int> ans;
        for(int i=0;i<n;i++){
            int minCol=solve(matrix,i);
            int value=matrix[i][minCol];
            if(check(matrix,value,minCol)){
                ans.push_back(value);
            }
        }
        return ans;
    }
};
