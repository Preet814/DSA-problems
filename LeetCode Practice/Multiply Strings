Problem : Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also 
          represented as a string.
          Note: You must not use any built-in BigInteger library or convert the inputs to integer directly.
          
          Example 1:
          Input: num1 = "2", num2 = "3"
          Output: "6"

Solution : 

class Solution {
public:
    string multiply(string num1, string num2) {
        if (num1 == "0")
            return "0";
        if (num2 == "0")
            return "0";
        vector<int> vec1(num1.size());
        for (int i = 0; i < num1.size(); i++) {
            vec1[i] = num1[num1.size() - i - 1] - '0';
        }
        // [3,2,1]
        vector<int> vec2(num2.size());
        for (int i = 0; i < num2.size(); i++) {
            vec2[i] = num2[num2.size() - i - 1] - '0';
        }
        // [6,5,4]
        // 4,3,2 with 1 carry
        vector<int> result(num1.size() + num2.size());
        for (int i = 0; i < vec2.size(); i++) {
            int carry = 0;
            for (int j = 0; j < vec1.size(); j++) {
                int product = (vec2[i] * vec1[j]) + carry + result[i + j];
                carry = product / 10;
                result[i + j] = product % 10;
            }
            result[i + vec1.size()] = carry;
        }
        // [8,8,0,6,5,0]
        while (result.size() > 1 && result.back() == 0) {
            result.pop_back();
        }
        // removing zeros [8,8,0,6,5]
        string str(result.size(),'0');
        for (int i = 0; i < result.size(); i++) {
            str[result.size()-i-1]=result[i]+'0';
        }
        return str;
    }
};
