Problem: Given a binary tree, find if it is height balanced or not. 
          A tree is height balanced if difference between heights of left and right subtrees is not more than one for all nodes of tree. 
          
          Example 1:
          Input:
                1
              /
             2
              \
               3 
          Output: 0
          Explanation: The max difference in height
          of left subtree and right subtree is 2,
          which is greater than 1. Hence unbalanced
          
          Example 2:
          Input:
                 10
               /   \
              20   30 
            /   \
           40   60
          Output: 1
          Explanation: The max difference in height
          of left subtree and right subtree is 1.
          Hence balanced. 

Solution:


pair<bool,int> solve(Node* root){
        if(root==NULL){
            pair<bool,int> p=make_pair(true,0);
            return p;
        }
        pair<bool,int> left=solve(root->left);
        pair<bool,int> right=solve(root->right);
        
        bool opt1=left.first;
        bool opt2=right.first;
        bool opt3=abs(left.second-right.second)<=1;
        pair<bool,int> ans;
        if(opt1 && opt2 && opt3){
            ans.first=true;
            ans.second=max(left.second,right.second)+1;
        }
        else{
            ans.first=false;
            ans.second=max(left.second,right.second)+1;
        }
        return ans;
    }
    bool isBalanced(Node *root)
    {
        return solve(root).first;
    }
