Problem: Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).

         Example 1:
        Input: root = [3,9,20,null,null,15,7]
        Output: [[15,7],[9,20],[3]]

Solution: 

vector<vector<int>> levelOrderBottom(TreeNode* root) {
        vector<vector<int>> mainAns;
        if(root==NULL)
            return mainAns;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            int size=q.size();
            vector<int> ans;
            for(int i=0;i<size;i++){
                TreeNode* temp=q.front();
                q.pop();
                if(temp->left!=NULL)
                    q.push(temp->left);
                if(temp->right!=NULL)
                    q.push(temp->right);
                ans.push_back(temp->val);
            }
            mainAns.push_back(ans);
        }
        reverse(mainAns.begin(),mainAns.end());
        return mainAns;
    }
