Problem : Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values 
          in the path equals targetSum. Each path should be returned as a list of the node values, not node references.
          A root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.
          
          Example 1:
          Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22
          Output: [[5,4,11,2],[5,8,4,5]]
          Explanation: There are two paths whose sum equals targetSum:
          5 + 4 + 11 + 2 = 22
          5 + 8 + 4 + 5 = 22

Solution : 

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void solve(TreeNode* root,vector<vector<int>>& ans,vector<int> temp, int targetSum,int sum){
        if(root==NULL)
            return;
        sum+=root->val;
        temp.push_back(root->val);
        if(root->left==NULL && root->right==NULL){
            if(sum==targetSum)
                ans.push_back(temp);
            else
                return;
        }
        solve(root->left,ans,temp,targetSum,sum);
        solve(root->right,ans,temp,targetSum,sum);
    }
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        vector<vector<int>> ans;
        int sum=0;
        vector<int> temp;
        solve(root,ans,temp,targetSum,sum);
        return ans;
    }
};
