Problem : Given a Directed Acyclic Graph of N vertices from 0 to N-1 and a 2D Integer array(or vector) edges[ ][ ] of length M, where there is a directed edge from edge[i][0] 
          to edge[i][1] with a distance of edge[i][2] for all i.
          Find the shortest path from src(0) vertex to all the vertices and if it is impossible to reach any vertex, then return -1 for that vertex.
          
          Example1:
          Input:
          N = 4, M = 2
          edge = [[0,1,2],[0,2,1]
          Output:
          0 2 1 -1
          Explanation:
          Shortest path from 0 to 1 is 0->1 with edge weight 2. 
          Shortest path from 0 to 2 is 0->2 with edge weight 1.
          There is no way we can reach 3, so it's -1 for 3.

Solution :

void dfs(int i,vector<pair<int,int>> adj[],int visited[],stack<int>& st){
        visited[i]=1;
        for(auto it:adj[i]){
            int v=it.first;
            if(!visited[v]){
                dfs(v,adj,visited,st);
            }
        }
        st.push(i);
    }
     vector<int> shortestPath(int N,int M, vector<vector<int>>& edges){
        vector<pair<int,int>> adj[N];
        for(int i=0;i<M;i++){
            int u=edges[i][0];
            int v=edges[i][1];
            int wt=edges[i][2];
            adj[u].push_back({v,wt});
        }
        int visited[N]={0};
        stack<int> st;
        for(int i=0;i<N;i++){
            if(!visited[i]){
                dfs(i,adj,visited,st);
            }
        }
        vector<int> distance(N,1e9);
        distance[0]=0;
        while(!st.empty()){
            int value=st.top();
            st.pop();
            for(auto it:adj[value]){
                int v=it.first;
                int wt=it.second;
                if(distance[value]+wt<distance[v]){
                    distance[v]=distance[value]+wt;
                }
            }
        }
        for (int i = 0; i < N; i++) {
            if (distance[i] == 1e9) distance[i] = -1;
        }
        return distance;
    }
