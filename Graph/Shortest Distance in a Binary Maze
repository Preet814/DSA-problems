Problem : Given a n * m matrix grid where each element can either be 0 or 1. You need to find the shortest distance between a given source cell to a destination cell. The 
          path can only be created out of a cell if its value is 1. If the path is not possible between source cell and destination cell, then return -1.
          Note : You can move into an adjacent cell if that adjacent cell is filled with element 1. Two cells are adjacent if they share a side. In other words, you 
          can move in one of the four directions, Up, Down, Left and Right. The source and destination cell are based on the zero based indexing. The source and destination 
          cell should be 1.
          
          Example 1:
          Input:
          grid[][] = {{1, 1, 1, 1},
                      {1, 1, 0, 1},
                      {1, 1, 1, 1},
                      {1, 1, 0, 0},
                      {1, 0, 0, 1}}
          source = {0, 1}
          destination = {2, 2}
          Output:
          3
          Explanation:
          1 1 1 1
          1 1 0 1
          1 1 1 1
          1 1 0 0
          1 0 0 1
          The highlighted part in the matrix denotes the 
          shortest path from source to destination cell.

Solution : 

int shortestPath(vector<vector<int>> &grid, pair<int, int> source,
                     pair<int, int> destination) {
        int n=grid.size();
        int m=grid[0].size();
        queue<pair<int,pair<int,int>> > q;
        vector<vector<int>> dis(n,vector<int>(m,1e9));
        dis[source.first][source.second]=0;
        q.push({0,{source.first,source.second}});
        if(source.first==destination.first && source.second==destination.second) 
            return 0; 
        int delrow[]={-1,0,1,0};
        int delcol[]={0,1,0,-1};
        while(!q.empty()){
            auto it=q.front();
            int dist=it.first;
            int r=it.second.first;
            int c=it.second.second;
            q.pop();
            for(int i=0;i<4;i++){
                int nrow=r+delrow[i];
                int ncol=c+delcol[i];
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && grid[nrow][ncol]==1 && dist+1<dis[nrow][ncol]){
                    dis[nrow][ncol]=dist+1;
                    if(nrow==destination.first && ncol==destination.second) 
                        return dist+1;
                    q.push({dist+1,{nrow,ncol}});
                }
            }
        }
        return -1;
    }
