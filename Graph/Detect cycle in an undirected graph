Problem : Given an undirected graph with V vertices and E edges, check whether it contains any cycle or not. Graph is in the form of adjacency list where adj[i] contains 
          all the nodes ith node is having edge with.
          
          Example 1:
          Input:  
          V = 5, E = 5
          adj = {{1}, {0, 2, 4}, {1, 3}, {2, 4}, {1, 3}} 
          Output: 1
          Explanation: 
          
          1->2->3->4->1 is a cycle.

Solution :

// bool BFSdetectCycle(int src,vector<int> adj[],vector<bool>& visited){
    //     visited[src]=true;
    //     queue<pair<int,int>> q;
    //     q.push({src,-1});
    //     while(!q.empty()){
    //         int node=q.front().first;
    //         int parent=q.front().second;
    //         q.pop();
    //         for(auto adjacentNode:adj[node]){
    //             if(!visited[adjacentNode]){
    //                 visited[adjacentNode]=true;
    //                 q.push({adjacentNode,node});
    //             }
    //             else if(parent!=adjacentNode){
    //                 return true;
    //             }
    //         }
    //     }
    //     return false;
    // }
    bool DFSdetectCycle(int src,int parent,vector<int> adj[],vector<bool>& visited){
        visited[src]=true;
        for(auto it:adj[src]){
            if(!visited[it]){
                if(DFSdetectCycle(it,src,adj,visited)){
                    return true;
                }
            }
            else if(parent!=it){
                return true;
            }
        }
        return false;
    }
    bool isCycle(int V, vector<int> adj[]) {
        vector<bool> visited(V,false);
        for(int i=0;i<V;i++){
            if(!visited[i]){
                //if(BFSDetectCycle(i,adj,visited)){
                //    return true;
                //}
                if(DFSdetectCycle(i,-1,adj,visited)){
                    return true;
                }
            }
        }
        return false;
    }
