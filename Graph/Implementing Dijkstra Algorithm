Problem : Given a weighted, undirected and connected graph of V vertices and an adjacency list adj where adj[i] is a list of lists containing two integers where the first 
          integer of each list j denotes there is edge between i and j , second integers corresponds to the weight of that  edge . You are given the source vertex S 
          and You to Find the shortest distance of all the vertex's from the source vertex S. You have to return a list of integers denoting shortest distance between 
          each node and Source vertex S.
          Note: The Graph doesn't contain any negative weight cycle.
          
          Example 1:
          Input:
          V = 2
          adj [] = {{{1, 9}}, {{0, 9}}}
          S = 0
          Output:
          0 9
          Explanation:
          The source vertex is 0. Hence, the shortest 
          distance of node 0 is 0 and the shortest 
          distance from node 1 is 9.

Solution : 

vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        //using priority queue data structure
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>> > pq;
        vector<int> dist(V,INT_MAX);
        dist[S]=0;
        pq.push({0,S});
        while(!pq.empty()){
            int dis=pq.top().first;
            int node=pq.top().second;
            pq.pop();
            for(auto it:adj[node]){
                int newNode=it[0];
                int newDis=it[1];
                if(newDis+dis<dist[newNode]){
                    dist[newNode]=newDis+dis;
                    pq.push({dist[newNode],newNode});
                }
            }
        }
        return dist;
        
        //using set data structure
        set<pair<int,int>> st;
        vector<int> dist(V,INT_MAX);
        dist[S]=0;
        st.insert({0,S});
        while(!st.empty()){
            auto top=*(st.begin());
            int dis=top.first;
            int node=top.second;
            st.erase(top);
            for(auto it:adj[node]){
                int newNode=it[0];
                int newDis=it[1];
                if(newDis+dis<dist[newNode]){
                    if(dist[newNode]==INT_MAX){
                        st.erase({dist[newNode],newNode});
                    }
                    dist[newNode]=newDis+dis;
                    st.insert({dist[newNode],newNode});
                }
            }
        }
        return dist;
    }
