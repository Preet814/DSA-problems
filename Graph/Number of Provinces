Problem : Given an undirected graph with V vertices. We say two vertices u and v belong to a single province if there is a path from u to v or v to u. Your task is to find the 
          number of provinces.
          Note: A province is a group of directly or indirectly connected cities and no other cities outside of the group.
          
          Example 1:
          Input:
          [
           [1, 0, 1],
           [0, 1, 0],
           [1, 0, 1]
          ]
          
          Output:
          2
          Explanation:
          The graph clearly has 2 Provinces [1,3] and [2]. As city 1 and city 3 has a path between them they belong to a single province. City 2 has no path to city 1 or 
          city 3 hence it belongs to another province.

Solution : 

void dfs(int value,vector<int> adjLs[],vector<bool>& visited){
        visited[value]=true;
        for(auto it:adjLs[value]){
            if(!visited[it]){
                dfs(it,adjLs,visited);
            }
        }
        return;
    }
    int numProvinces(vector<vector<int>> adj, int V) {
        vector<int> adjLs[V];
        for(int i=0;i<V;i++){
            for(int j=0;j<V;j++){
                if(i!=j && adj[i][j]==1){
                    adjLs[i].push_back(j);
                    adjLs[j].push_back(i);
                }
            }
        }
        int count=0;
        vector<bool> visited(V,false);
        for(int i=0;i<V;i++){
            if(visited[i]==false){
                count++;
                dfs(i,adjLs,visited);
            }
        }
        return count;
    }
