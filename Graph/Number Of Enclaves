Problem : You are given an n x m binary matrix grid, where 0 represents a sea cell and 1 represents a land cell.
          A move consists of walking from one land cell to another adjacent (4-directionally) land cell or walking off the boundary of the grid.
          Find the number of land cells in grid for which we cannot walk off the boundary of the grid in any number of moves.
          
          Example 1:
          Input:
          grid[][] = {{0, 0, 0, 0},
                      {1, 0, 1, 0},
                      {0, 1, 1, 0},
                      {0, 0, 0, 0}}
          Output:
          3
          Explanation:
          0 0 0 0
          1 0 1 0
          0 1 1 0
          0 0 0 0
          The highlighted cells represents the land cells.

Solution :

void dfs(int row,int col,vector<vector<int>> &grid,vector<vector<int>>& visited){
        visited[row][col]=1;
        int delrow[]={-1,0,1,0};
        int delcol[]={0,1,0,-1};
        int n=grid.size();
        int m=grid[0].size();
        for(int i=0;i<4;i++){
            int nrow=row+delrow[i];
            int ncol=col+delcol[i];
            if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && !visited[nrow][ncol] && grid[nrow][ncol]==1){
                dfs(nrow,ncol,grid,visited);
            }
        }
    }
    int numberOfEnclaves(vector<vector<int>> &grid) {
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<int>> visited(n,vector<int>(m,0));
        for(int j=0;j<m;j++){
            //1st row
            if(grid[0][j]==1 && !visited[0][j]){
                dfs(0,j,grid,visited);
            }
            //last row
            if(grid[n-1][j]==1 && !visited[n-1][j]){
                dfs(n-1,j,grid,visited);
            }
        }
        for(int i=0;i<n;i++){
            //1st col
            if(grid[i][0]==1 && !visited[i][0]){
                dfs(i,0,grid,visited);
            }
            //last col
            if(grid[i][m-1]==1 && !visited[i][m-1]){
                dfs(i,m-1,grid,visited);
            }
        }
        int count=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1 && visited[i][j]==0){
                    count++;
                }
            }
        }
        return count;
    }
