Problem : There are n cities and m edges connected by some number of flights. You are given an array flights where flights[i] = [fromi, toi, pricei] indicates that there is a 
          flight from the city fromi to city toi with cost pricei.
          You are also given three integers src, dst, and k, return the cheapest price from src to dst with at most k stops. If there is no such route, return -1.
          Note: The price from city A to B may be different From price from city B to A. 
          
          Example 1:
          Input:
          n = 4
          flights = [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]]
          src = 0
          dst = 3
          k = 1
          Output:
          700
          Explanation:
          The optimal path with at most 1 stop from city 0 to 3 is marked in red and has cost 100 + 600 = 700.
          Note that the path through cities [0,1,2,3] is cheaper but is invalid because it uses 2 stops.

Solution :

int CheapestFLight(int n, vector<vector<int>>& flights, int src, int dst, int K)  {
        vector<pair<int,int>> adj[n];
        for(auto it:flights){
            adj[it[0]].push_back({it[1],it[2]});
        }
        //{stop,{node,distance}}
        queue<pair<int,pair<int,int>>> q;
        q.push({0,{src,0}});
        vector<int> dist(n,1e9);
        dist[src]=0;
        while(!q.empty()){
            auto top=q.front();
            q.pop();
            int stop=top.first;
            int node=top.second.first;
            int dis=top.second.second;
            if(stop>K){
                continue;
            }
            for(auto it:adj[node]){
                int adjNode=it.first;
                int edW=it.second;
                if(edW+dis<dist[adjNode]){
                    dist[adjNode]=edW+dis;
                    q.push({stop+1,{adjNode,edW+dis}});
                }
            }
        }
        if(dist[dst]==1e9){
            return -1;
        }
        return dist[dst];
        
    }
