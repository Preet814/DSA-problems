Problem : Given a grid of dimension nxm where each cell in the grid can have values 0, 1 or 2 which has the following meaning:
          0 : Empty cell
          1 : Cells have fresh oranges
          2 : Cells have rotten oranges
          We have to determine what is the earliest time after which all the oranges are rotten. A rotten orange at index [i,j] can rot other fresh orange at indexes 
          [i-1,j], [i+1,j], [i,j-1], [i,j+1] (up, down, left and right) in unit time. 
           
          Example 1:
          Input: grid = {{0,1,2},{0,1,2},{2,1,1}}
          Output: 1
          Explanation: The grid is-
          0 1 2
          0 1 2
          2 1 1
          Oranges at positions (0,2), (1,2), (2,0)
          will rot oranges at (0,1), (1,1), (2,2) and 
          (2,1) in unit time.

Solution :

int orangesRotting(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        queue<pair<pair<int,int>,int>> q;
        vector<vector<bool>> visited(n,vector<bool>(m,false));
        int cntFresh=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==2){
                    q.push({{i,j},0});
                    visited[i][j]=true;
                }
                if(grid[i][j]==1){
                    cntFresh++;
                }
            }
        }
        int tm=0;
        int cnt=0;
        int delrow[]={-1,0,+1,0};
        int delcol[]={0,+1,0,-1};
        while(!q.empty()){
            int row=q.front().first.first;
            int col=q.front().first.second;
            int tomato=q.front().second;
            tm=max(tm,tomato);
            q.pop();
            for(int i=0;i<4;i++){
                int nrow=row+delrow[i];
                int ncol=col+delcol[i];
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && visited[nrow][ncol]!=true && grid[nrow][ncol]==1){
                    q.push({{nrow,ncol},tomato+1});
                    visited[nrow][ncol]=true;
                    cnt++;
                }
            }
        }
        if(cnt!=cntFresh)
            return -1;
        return tm;
    }
