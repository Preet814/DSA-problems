Problem: Given a binary tree. The task is to check whether the given tree follows the max heap property or not.
          Note: Properties of a tree to be a max heap - Completeness and Value of node greater than or equal to its child.
          
          Example 1:
          Input:
                5
              /  \
             2    3
          Output: 1
          Explanation: The given tree follows max-heap property since 5,
          is root and it is greater than both its children.

Solution:

int countNodes(struct Node* tree){
        if(tree==NULL)
            return 0;
        int ans = 1+countNodes(tree->left)+countNodes(tree->right);
        return ans;
    }
    bool isCBT(struct Node* tree,int i,int cnt){
        if(tree==NULL)
            return true;
        if(i>=cnt)
            return false;
        else{
            bool left=isCBT(tree->left,2*i+1,cnt);
            bool right=isCBT(tree->right,2*i+2,cnt);
            return (left&&right);
        }
    }
    bool isMaxOrder(struct Node* tree){
        if(tree->left==NULL && tree->right==NULL)
            return true;
        if(tree->right==NULL)
            return ((tree->data)>(tree->left->data));
        else{
            bool left=isMaxOrder(tree->left);
            bool right=isMaxOrder(tree->right);
            
            return left&&right&&(tree->data>tree->left->data&&tree->data>tree->right->data);
        }
    }
    bool isHeap(struct Node* tree) {
        int nodeCount=countNodes(tree);
        int index=0;
        if(isCBT(tree,index,nodeCount) && isMaxOrder(tree)){
            return true;
        }
        else{
            return false;
        }
        
    }
