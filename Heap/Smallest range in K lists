Problem : Given K sorted lists of integers, KSortedArray[] of size N each. The task is to find the smallest range that includes at least one element from each of the K lists. 
          If more than one such range's are found, return the first such range found.
    
          Example 1:
          Input:
          N = 5, K = 3
          KSortedArray[][] = {{1 3 5 7 9},
                              {0 2 4 6 8},
                              {2 3 5 7 11}}
          Output: 1 2
          Explanation: K = 3
          A:[1 3 5 7 9]
          B:[0 2 4 6 8]
          C:[2 3 5 7 11]
          Smallest range is formed by number 1
          present in first list and 2 is present
          in both 2nd and 3rd list.

Solution : 

class node{
        public:
            int data;
            int rowIndex;
            int colIndex;
        node(int d,int row,int col){
            data=d;
            rowIndex=row;
            colIndex=col;
        }
    };
    class compare{
        public:
            bool operator()(node* a,node* b){
                return a->data > b->data;
            }
    };
    pair<int,int> findSmallestRange(int KSortedArray[][N], int n, int k)
    {
        int maxi=INT_MIN;
        int mini=INT_MAX;
        priority_queue<node*,vector<node*>,compare > pq;
        for(int i=0;i<k;i++){
            int element=KSortedArray[i][0];
            maxi=max(maxi,element);
            mini=min(mini,element);
            node* temp=new node(element,i,0);
            pq.push(temp);
        }
        
        int start=mini;
        int end=maxi;
        while(!pq.empty()){
            node* temp=pq.top();
            pq.pop();
            mini=temp->data;
            if(maxi-mini < end-start){
                start=mini;
                end=maxi;
            }
            int i=temp->rowIndex;
            int j=temp->colIndex;
            if(j+1<n){
                maxi=max(maxi,KSortedArray[i][j+1]);
                node* temp=new node(KSortedArray[i][j+1],i,j+1);
                pq.push(temp);
            }
            else{
                break;
            }
        }
        return {start,end};
    }
